"""
–ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
"""
from typing import Dict, Optional
from config import ORDER_STATUSES


class User:
    """
    –ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ
    """
    def __init__(self, user_id: int, first_name: str, last_name: Optional[str] = None,
                 username: Optional[str] = None, role: str = 'technician',
                 is_approved: bool = False, created_at: Optional[str] = None):
        self.user_id = user_id
        self.first_name = first_name
        self.last_name = last_name
        self.username = username
        self.role = role
        self.is_approved = is_approved
        self.created_at = created_at

    @classmethod
    def from_dict(cls, data: Dict):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ User –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        """
        user_id = data.get('user_id')
        first_name = data.get('first_name')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –Ω–µ None
        if user_id is None or first_name is None:
            raise ValueError("user_id –∏ first_name –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å None")
            
        return cls(
            user_id=user_id,
            first_name=first_name,
            last_name=data.get('last_name'),
            username=data.get('username'),
            role=data.get('role', 'technician'),
            is_approved=data.get('is_approved', False),
            created_at=data.get('created_at')
        )

    def to_dict(self) -> Dict:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ User –≤ —Å–ª–æ–≤–∞—Ä—å
        """
        return {
            'user_id': self.user_id,
            'first_name': self.first_name,
            'last_name': self.last_name,
            'username': self.username,
            'role': self.role,
            'is_approved': self.is_approved,
            'created_at': self.created_at
        }

    def get_full_name(self) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        full_name = self.first_name
        if self.last_name:
            full_name += f" {self.last_name}"
        return full_name

    def is_admin(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        """
        return self.role == 'admin'

    def is_dispatcher(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º
        """
        return self.role == 'dispatcher'

    def is_technician(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ—Ö–Ω–∏–∫–æ–º
        """
        return self.role == 'technician'


class Order:
    """
    –ú–æ–¥–µ–ª—å –∑–∞–∫–∞–∑–∞ –≤ —Å–∏—Å—Ç–µ–º–µ
    """
    def __init__(self, order_id: int, client_phone: str, client_name: str,
                 client_address: str, problem_description: str, dispatcher_id: Optional[int] = None,
                 status: str = 'new', service_cost: Optional[float] = None,
                 service_description: Optional[str] = None, created_at: Optional[str] = None,
                 updated_at: Optional[str] = None, dispatcher_first_name: Optional[str] = None,
                 dispatcher_last_name: Optional[str] = None, technicians: Optional[list] = None):
        self.order_id = order_id
        self.client_phone = client_phone
        self.client_name = client_name
        self.client_address = client_address
        self.problem_description = problem_description
        self.dispatcher_id = dispatcher_id
        self.status = status
        self.service_cost = service_cost
        self.service_description = service_description
        self.created_at = created_at
        self.updated_at = updated_at
        self.dispatcher_first_name = dispatcher_first_name
        self.dispatcher_last_name = dispatcher_last_name
        self.technicians = technicians or []

    @classmethod
    def from_dict(cls, data: Dict):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ Order –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        """
        order_id = data.get('order_id')
        client_phone = data.get('client_phone')
        client_name = data.get('client_name')
        client_address = data.get('client_address')
        problem_description = data.get('problem_description')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if order_id is None or client_phone is None or client_name is None or client_address is None or problem_description is None:
            raise ValueError("–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–∫–∞–∑–∞ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å None")
            
        return cls(
            order_id=order_id,
            client_phone=client_phone,
            client_name=client_name,
            client_address=client_address,
            problem_description=problem_description,
            dispatcher_id=data.get('dispatcher_id'),
            status=data.get('status', 'new'),
            service_cost=data.get('service_cost'),
            service_description=data.get('service_description'),
            created_at=data.get('created_at'),
            updated_at=data.get('updated_at'),
            dispatcher_first_name=data.get('dispatcher_first_name'),
            dispatcher_last_name=data.get('dispatcher_last_name'),
            technicians=data.get('technicians', [])
        )

    def to_dict(self) -> Dict:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ Order –≤ —Å–ª–æ–≤–∞—Ä—å
        """
        return {
            'order_id': self.order_id,
            'client_phone': self.client_phone,
            'client_name': self.client_name,
            'client_address': self.client_address,
            'problem_description': self.problem_description,
            'dispatcher_id': self.dispatcher_id,
            'status': self.status,
            'service_cost': self.service_cost,
            'service_description': self.service_description,
            'created_at': self.created_at,
            'updated_at': self.updated_at,
            'dispatcher_first_name': self.dispatcher_first_name,
            'dispatcher_last_name': self.dispatcher_last_name,
            'technicians': self.technicians
        }

    def format_for_display(self) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        """
        result = (
            f"üìù *–ó–∞–∫–∞–∑ #{self.order_id}*\n\n"
            f"üîÑ –°—Ç–∞—Ç—É—Å: *{self.status_to_russian()}*\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞: {self.client_phone}\n"
            f"üë§ –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞: {self.client_name}\n"
            f"üè† –ê–¥—Ä–µ—Å: {self.client_address}\n"
            f"üîß –ü—Ä–æ–±–ª–µ–º–∞: {self.problem_description}\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ
        if self.dispatcher_first_name:
            dispatcher_name = self.dispatcher_first_name
            if self.dispatcher_last_name:
                dispatcher_name += f" {self.dispatcher_last_name}"
            result += f"üìû –î–∏—Å–ø–µ—Ç—á–µ—Ä: {dispatcher_name}\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Ö–Ω–∏–∫–∞—Ö
        if self.technicians:
            techs = []
            for tech in self.technicians:
                tech_name = tech['first_name']
                if tech['last_name']:
                    tech_name += f" {tech['last_name']}"
                techs.append(tech_name)
            result += f"üë®‚Äçüîß –ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏: {', '.join(techs)}\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É—Å–ª—É–≥
        if self.service_cost is not None:
            result += f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {self.service_cost} —Ä—É–±.\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞—Ö
        if self.service_description:
            result += f"üìã –û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç: {self.service_description}\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if self.created_at:
            result += f"üìÖ –°–æ–∑–¥–∞–Ω: {self.created_at}\n"
        if self.updated_at:
            result += f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω: {self.updated_at}\n"

        return result

    def status_to_russian(self) -> str:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
        """
        return ORDER_STATUSES.get(self.status, self.status)


class Assignment:
    """
    –ú–æ–¥–µ–ª—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ —Ç–µ—Ö–Ω–∏–∫—É
    """
    def __init__(self, assignment_id: int, order_id: int, technician_id: int,
                 assigned_by: int, assigned_at: Optional[str] = None,
                 first_name: Optional[str] = None, last_name: Optional[str] = None,
                 username: Optional[str] = None):
        self.assignment_id = assignment_id
        self.order_id = order_id
        self.technician_id = technician_id
        self.assigned_by = assigned_by
        self.assigned_at = assigned_at
        self.first_name = first_name
        self.last_name = last_name
        self.username = username

    @classmethod
    def from_dict(cls, data: Dict):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ Assignment –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        """
        assignment_id = data.get('assignment_id')
        order_id = data.get('order_id')
        technician_id = data.get('technician_id')
        assigned_by = data.get('assigned_by')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if assignment_id is None or order_id is None or technician_id is None or assigned_by is None:
            raise ValueError("–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å None")
        
        return cls(
            assignment_id=assignment_id,
            order_id=order_id,
            technician_id=technician_id,
            assigned_by=assigned_by,
            assigned_at=data.get('assigned_at'),
            first_name=data.get('first_name'),
            last_name=data.get('last_name'),
            username=data.get('username')
        )

    def to_dict(self) -> Dict:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ Assignment –≤ —Å–ª–æ–≤–∞—Ä—å
        """
        return {
            'assignment_id': self.assignment_id,
            'order_id': self.order_id,
            'technician_id': self.technician_id,
            'assigned_by': self.assigned_by,
            'assigned_at': self.assigned_at,
            'first_name': self.first_name,
            'last_name': self.last_name,
            'username': self.username
        }

    def get_technician_name(self) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ç–µ—Ö–Ω–∏–∫–∞
        """
        name = self.first_name or ""
        if self.last_name:
            name += f" {self.last_name}"
        return name