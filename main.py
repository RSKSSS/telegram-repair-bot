#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏ –Ω–∞ —Ä–µ–º–æ–Ω—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤
"""

import logging
import os
from flask import Flask, render_template, redirect, url_for
from database import initialize_database

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏–∑ shared_state
from shared_state import bot

# –û—Ç–∫–ª—é—á–∞–µ–º AI —Ñ—É–Ω–∫—Ü–∏–∏
try:
    import bot
except ImportError as e:
    print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")

# AI —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã
logger.info("AI —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã")

# –°–æ–∑–¥–∞–µ–º Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)
app.secret_key = os.environ.get("SESSION_SECRET", "service_bot_secret_key")

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return render_template_string("""
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Telegram –ë–æ—Ç –¥–ª—è –°–µ—Ä–≤–∏—Å–∞ –†–µ–º–æ–Ω—Ç–∞</title>
        <link href="https://cdn.replit.com/agent/bootstrap-agent-dark-theme.min.css" rel="stylesheet">
        <style>
            body {
                display: flex;
                flex-direction: column;
                align-items: center;
                justify-content: center;
                min-height: 100vh;
                text-align: center;
                padding: 20px;
            }
            .container {
                max-width: 800px;
            }
            .icon {
                font-size: 4rem;
                margin-bottom: 1rem;
            }
            .features {
                text-align: left;
                margin-top: 2rem;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="icon">ü§ñ</div>
            <h1 class="mb-4">Telegram –ë–æ—Ç –¥–ª—è –°–µ—Ä–≤–∏—Å–∞ –†–µ–º–æ–Ω—Ç–∞</h1>
            <div class="alert alert-success" role="alert">
                <strong>–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!</strong>
            </div>
            <p class="lead mb-4">
                –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–∫–∞–∑–∞–º–∏ –Ω–∞ —Ä–µ–º–æ–Ω—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏,
                –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤, –º–∞—Å—Ç–µ—Ä–æ–≤ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
            </p>
            <div class="features">
                <h3>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</h3>
                <ul class="list-group mb-4">
                    <li class="list-group-item">‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏</li>
                    <li class="list-group-item">‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–æ–≤ –Ω–∞ –∑–∞–∫–∞–∑—ã</li>
                    <li class="list-group-item">‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)</li>
                    <li class="list-group-item">‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö</li>
                    <li class="list-group-item">‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–æ–≤</li>
                </ul>
            </div>
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">–ö–∞–∫ –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞?</h5>
                    <p class="card-text">
                        –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–∞–π–¥–∏—Ç–µ –µ–≥–æ –≤ Telegram –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/start</code>.
                    </p>
                </div>
            </div>
        </div>
    </body>
    </html>
    """)

def template_folder():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ templates –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
    if not os.path.exists('templates'):
        os.makedirs('templates')

def render_template_string(template_string):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
    template_folder()

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —à–∞–±–ª–æ–Ω–∞
    with open('templates/temp.html', 'w') as f:
        f.write(template_string)

    return render_template('temp.html')

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    initialize_database()

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    port = int(os.environ.get('PORT', 5051))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–∫—Ä–∏–ø—Ç –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ python –∏–ª–∏ –≤ —Å—Ä–µ–¥–µ Render
    # –í —Å—Ä–µ–¥–µ Render –∏–ª–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —á–µ—Ä–µ–∑ gunicorn, GUNICORN_CMD_ARGS –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
    is_direct_run = os.environ.get('GUNICORN_CMD_ARGS') is None and not os.environ.get('RENDER')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    if not os.environ.get('TELEGRAM_BOT_TOKEN'):
        logger.error("–û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN.")
        if is_direct_run:  # –¢–æ–ª—å–∫–æ –≤—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞–ø—Ä—è–º—É—é
            return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ (–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —á–µ—Ä–µ–∑ gunicorn –≤ Render)
    if is_direct_run or os.environ.get('RENDER'):
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–µ–º–æ–Ω—Ç–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤...")
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –±–µ–∑ AI —Ñ—É–Ω–∫—Ü–∏–π")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        import threading

        def bot_polling():
            try:
                from shared_state import bot as telebot_instance
                telebot_instance.polling(none_stop=True, interval=0)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

        bot_thread = threading.Thread(target=bot_polling)
        bot_thread.daemon = True
        bot_thread.start()

        logger.info("–ë–æ—Ç —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
    
    if is_direct_run:
        # –ó–∞–ø—É—Å–∫–∞–µ–º Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        app.run(host='0.0.0.0', port=port)
    else:
        # –í —Ä–µ–∂–∏–º–µ gunicorn –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º app.run(), 
        # —Ç.–∫. gunicorn —Å–∞–º —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
        logger.info(f"–ó–∞–ø—É—â–µ–Ω–æ —á–µ—Ä–µ–∑ gunicorn –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        # –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –≤ —Ä–µ–∂–∏–º–µ Render –±–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è, 
        # –Ω–æ Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è gunicorn

if __name__ == "__main__":
    main()