#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏ –Ω–∞ —Ä–µ–º–æ–Ω—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤
"""

import logging
import os
from flask import Flask, render_template, redirect, url_for
from database import initialize_database
from bot import bot

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)
app.secret_key = os.environ.get("SESSION_SECRET", "service_bot_secret_key")

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return render_template_string("""
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Telegram –ë–æ—Ç –¥–ª—è –°–µ—Ä–≤–∏—Å–∞ –†–µ–º–æ–Ω—Ç–∞</title>
        <link href="https://cdn.replit.com/agent/bootstrap-agent-dark-theme.min.css" rel="stylesheet">
        <style>
            body {
                display: flex;
                flex-direction: column;
                align-items: center;
                justify-content: center;
                min-height: 100vh;
                text-align: center;
                padding: 20px;
            }
            .container {
                max-width: 800px;
            }
            .icon {
                font-size: 4rem;
                margin-bottom: 1rem;
            }
            .features {
                text-align: left;
                margin-top: 2rem;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="icon">ü§ñ</div>
            <h1 class="mb-4">Telegram –ë–æ—Ç –¥–ª—è –°–µ—Ä–≤–∏—Å–∞ –†–µ–º–æ–Ω—Ç–∞</h1>
            <div class="alert alert-success" role="alert">
                <strong>–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!</strong>
            </div>
            <p class="lead mb-4">
                –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–∫–∞–∑–∞–º–∏ –Ω–∞ —Ä–µ–º–æ–Ω—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏,
                –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤, –º–∞—Å—Ç–µ—Ä–æ–≤ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
            </p>
            <div class="features">
                <h3>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</h3>
                <ul class="list-group mb-4">
                    <li class="list-group-item">‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏</li>
                    <li class="list-group-item">‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–æ–≤ –Ω–∞ –∑–∞–∫–∞–∑—ã</li>
                    <li class="list-group-item">‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)</li>
                    <li class="list-group-item">‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö</li>
                    <li class="list-group-item">‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–æ–≤</li>
                </ul>
            </div>
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">–ö–∞–∫ –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞?</h5>
                    <p class="card-text">
                        –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–∞–π–¥–∏—Ç–µ –µ–≥–æ –≤ Telegram –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/start</code>.
                    </p>
                </div>
            </div>
        </div>
    </body>
    </html>
    """)

def template_folder():
    """Create templates folder if it doesn't exist"""
    if not os.path.exists('templates'):
        os.makedirs('templates')

def render_template_string(template_string):
    """Render a template string"""
    template_folder()
    
    # Create a temporary template file
    with open('templates/temp.html', 'w') as f:
        f.write(template_string)
    
    return render_template('temp.html')

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    initialize_database()
    
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–µ–º–æ–Ω—Ç–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    if not os.environ.get('TELEGRAM_BOT_TOKEN'):
        logger.error("–û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–∞ API –æ—Ç OpenAI
    if not os.environ.get('OPENAI_API_KEY'):
        logger.warning("–í–Ω–∏–º–∞–Ω–∏–µ: –ö–ª—é—á API OpenAI –Ω–µ –Ω–∞–π–¥–µ–Ω. –§—É–Ω–∫—Ü–∏–∏ –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –±—É–¥—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
    else:
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ AI –∫–æ–º–∞–Ω–¥
        try:
            from ai_commands import register_ai_commands
            register_ai_commands(bot)
            logger.info("AI —Ñ—É–Ω–∫—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ AI —Ñ—É–Ω–∫—Ü–∏–π: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    import threading
    bot_thread = threading.Thread(target=bot.infinity_polling)
    bot_thread.daemon = True
    bot_thread.start()
    
    logger.info("–ë–æ—Ç —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    app.run(host='0.0.0.0', port=5051)

if __name__ == "__main__":
    main()