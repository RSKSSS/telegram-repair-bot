"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö
"""
import logging
import traceback
from datetime import datetime
import time
import socket
import os
import json
from typing import List, Dict, Any, Optional, Union

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä—ã
try:
    from setup_logging import admin_logger, error_logger
except ImportError:
    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –ª–æ–≥–≥–µ—Ä
    logging.basicConfig(level=logging.INFO)
    admin_logger = logging.getLogger('admin_notifications')
    error_logger = logging.getLogger('error_notifications')

class ErrorSeverity:
    """–£—Ä–æ–≤–Ω–∏ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏ –æ—à–∏–±–æ–∫"""
    LOW = "low"           # –ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏
    MEDIUM = "medium"     # –û—à–∏–±–∫–∏, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è
    HIGH = "high"         # –°–µ—Ä—å–µ–∑–Ω—ã–µ –æ—à–∏–±–∫–∏
    CRITICAL = "critical" # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏, —Ç—Ä–µ–±—É—é—â–∏–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞

class ErrorNotification:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
    
    def __init__(self, 
                 message: str, 
                 severity: str = ErrorSeverity.MEDIUM,
                 exception: Optional[Exception] = None,
                 traceback_info: Optional[str] = None,
                 user_id: Optional[int] = None,
                 context: Optional[Dict[str, Any]] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        
        Args:
            message: –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            severity: –£—Ä–æ–≤–µ–Ω—å —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏ –∏–∑ ErrorSeverity
            exception: –û–±—ä–µ–∫—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
            traceback_info: –°—Ç—Ä–æ–∫–∞ —Å —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–æ–π —Å—Ç–µ–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å –∫–æ—Ç–æ—Ä—ã–º —Å–≤—è–∑–∞–Ω–∞ –æ—à–∏–±–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è
        """
        self.message = message
        self.severity = severity
        self.exception = exception
        self.traceback_info = traceback_info
        self.timestamp = datetime.now()
        self.user_id = user_id
        self.context = context or {}
        self.hostname = socket.gethostname()
        self.environment = os.environ.get('RENDER', 'development')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
        self.process_id = os.getpid()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ—à –æ—à–∏–±–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
        self.error_hash = self._generate_error_hash()
    
    def _generate_error_hash(self) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ö–µ—à –¥–ª—è –æ—à–∏–±–∫–∏, —á—Ç–æ–±—ã –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ö–æ–∂–∏–µ –æ—à–∏–±–∫–∏
        
        Returns:
            str: –•–µ—à –æ—à–∏–±–∫–∏
        """
        import hashlib
        
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤—É –¥–ª—è —Ö–µ—à–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ç–∏–ø–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        hash_base = f"{self.message}"
        
        if self.exception:
            hash_base += f"_{type(self.exception).__name__}"
            
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ö–µ—à–∞
        if self.traceback_info:
            first_line = self.traceback_info.split('\n')[0]
            hash_base += f"_{first_line}"
            
        # –°–æ–∑–¥–∞–µ–º MD5 —Ö–µ—à
        return hashlib.md5(hash_base.encode()).hexdigest()
    
    def to_dict(self) -> Dict[str, Any]:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        
        Returns:
            Dict: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        """
        result = {
            'message': self.message,
            'severity': self.severity,
            'timestamp': self.timestamp.isoformat(),
            'hostname': self.hostname,
            'environment': self.environment,
            'process_id': self.process_id,
            'error_hash': self.error_hash
        }
        
        if self.exception:
            result['exception'] = {
                'type': type(self.exception).__name__,
                'message': str(self.exception)
            }
            
        if self.traceback_info:
            result['traceback'] = self.traceback_info
            
        if self.user_id:
            result['user_id'] = self.user_id
            
        if self.context:
            result['context'] = self.context
            
        return result
    
    def format_message_for_telegram(self) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
        
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        severity_emoji = {
            ErrorSeverity.LOW: "‚ÑπÔ∏è",
            ErrorSeverity.MEDIUM: "‚ö†Ô∏è",
            ErrorSeverity.HIGH: "üî¥",
            ErrorSeverity.CRITICAL: "üö®"
        }
        
        emoji = severity_emoji.get(self.severity, "‚ö†Ô∏è")
        timestamp_str = self.timestamp.strftime("%d.%m.%Y %H:%M:%S")
        
        message = f"{emoji} *–û—à–∏–±–∫–∞: {self.severity.upper()}*\n\n"
        message += f"‚è∞ *–í—Ä–µ–º—è:* {timestamp_str}\n"
        message += f"üåê *–°—Ä–µ–¥–∞:* {self.environment}\n"
        message += f"üíª *–°–µ—Ä–≤–µ—Ä:* {self.hostname}\n"
        message += f"üìù *–°–æ–æ–±—â–µ–Ω–∏–µ:* {self.message}\n"
        
        if self.exception:
            message += f"‚ùå *–ò—Å–∫–ª—é—á–µ–Ω–∏–µ:* {type(self.exception).__name__}: {str(self.exception)}\n"
            
        if self.user_id:
            message += f"üë§ *ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:* {self.user_id}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É —Å—Ç–µ–∫–∞ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—É—é –ø–æ –¥–ª–∏–Ω–µ)
        if self.traceback_info:
            max_length = 500
            traceback_short = self.traceback_info
            if len(traceback_short) > max_length:
                traceback_short = traceback_short[:max_length] + "...\n[—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ]"
            message += f"\n```\n{traceback_short}\n```"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if self.context and len(self.context) > 0:
            message += "\n*–ö–æ–Ω—Ç–µ–∫—Å—Ç:*\n"
            for key, value in self.context.items():
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∑–Ω–∞—á–µ–Ω–∏—è
                str_value = str(value)
                if len(str_value) > 50:
                    str_value = str_value[:50] + "..."
                message += f"- {key}: {str_value}\n"
                
        return message

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –æ—à–∏–±–æ–∫
_error_cache = {}
_notification_throttle = {}

def should_send_notification(error_hash: str, min_interval_seconds: int = 300) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–ø–∞–º–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –æ—à–∏–±–∫–∞–º–∏
    
    Args:
        error_hash: –•–µ—à –æ—à–∏–±–∫–∏
        min_interval_seconds: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
    Returns:
        bool: True, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    """
    current_time = time.time()
    
    # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Ä–∞–Ω–µ–µ –Ω–µ –≤—Å—Ç—Ä–µ—á–∞–ª–∞—Å—å, —Ä–∞–∑—Ä–µ—à–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
    if error_hash not in _notification_throttle:
        _notification_throttle[error_hash] = current_time
        return True
    
    # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏, —Ä–∞–∑—Ä–µ—à–∞–µ–º
    last_sent = _notification_throttle[error_hash]
    if current_time - last_sent >= min_interval_seconds:
        _notification_throttle[error_hash] = current_time
        return True
    
    # –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
    return False

def get_admin_user_ids() -> List[int]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    
    Returns:
        List[int]: –°–ø–∏—Å–æ–∫ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    """
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        from database import get_all_users
        from config import ROLES
        
        users = get_all_users()
        admin_ids = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if users:
            for user in users:
                try:
                    from database import get_user_role
                    
                    user_id = user.get('user_id') or user.get('id')
                    if user_id and get_user_role(user_id) == ROLES['admin']:
                        admin_ids.append(user_id)
                except Exception as e:
                    error_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        
        return admin_ids
    except Exception as e:
        error_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        return []

def notify_admins_about_error(message: str, 
                             severity: str = ErrorSeverity.MEDIUM,
                             exception: Optional[Exception] = None,
                             user_id: Optional[int] = None,
                             context: Optional[Dict[str, Any]] = None,
                             force: bool = False) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        severity: –£—Ä–æ–≤–µ–Ω—å —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏
        exception: –û–±—ä–µ–∫—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å –∫–æ—Ç–æ—Ä—ã–º —Å–≤—è–∑–∞–Ω–∞ –æ—à–∏–±–∫–∞
        context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        force: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –∏–≥–Ω–æ—Ä–∏—Ä—É—è —Ç—Ä–æ—Ç–ª–∏–Ω–≥
        
    Returns:
        bool: True, –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    """
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–µ–∫–µ –≤—ã–∑–æ–≤–æ–≤, –µ—Å–ª–∏ –µ—Å—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
    traceback_info = None
    if exception:
        traceback_info = ''.join(traceback.format_exception(type(exception), exception, exception.__traceback__))
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    notification = ErrorNotification(
        message=message,
        severity=severity,
        exception=exception,
        traceback_info=traceback_info,
        user_id=user_id,
        context=context
    )
    
    # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    if severity in [ErrorSeverity.HIGH, ErrorSeverity.CRITICAL]:
        error_logger.error(message, exc_info=True if exception else False)
    else:
        error_logger.warning(message, exc_info=True if exception else False)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞)
    if not force and not should_send_notification(notification.error_hash):
        error_logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —Ö–µ—à–µ–º {notification.error_hash} –ø—Ä–æ–ø—É—â–µ–Ω–æ (—Ç—Ä–æ—Ç–ª–∏–Ω–≥)")
        return False
    
    # –ü–æ–ª—É—á–∞–µ–º ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    admin_ids = get_admin_user_ids()
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤, –ª–æ–≥–∏—Ä—É–µ–º —ç—Ç–æ –∏ –≤—ã—Ö–æ–¥–∏–º
    if not admin_ids:
        error_logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ")
        return False
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
    telegram_message = notification.format_message_for_telegram()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    success = False
    try:
        from shared_state import bot
        
        for admin_id in admin_ids:
            try:
                bot.send_message(admin_id, telegram_message, parse_mode="Markdown")
                admin_logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}")
                success = True
            except Exception as e:
                error_logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
    except Exception as e:
        error_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
    
    return success

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–∑–æ–≤–∞ —Å —Ä–∞–∑–Ω–æ–π —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å—é
def notify_info(message: str, **kwargs):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
    return notify_admins_about_error(message, severity=ErrorSeverity.LOW, **kwargs)

def notify_warning(message: str, **kwargs):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"""
    return notify_admins_about_error(message, severity=ErrorSeverity.MEDIUM, **kwargs)

def notify_error(message: str, **kwargs):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–µ—Ä—å–µ–∑–Ω–æ–π –æ—à–∏–±–∫–µ"""
    return notify_admins_about_error(message, severity=ErrorSeverity.HIGH, **kwargs)

def notify_critical(message: str, **kwargs):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ"""
    return notify_admins_about_error(message, severity=ErrorSeverity.CRITICAL, **kwargs)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def log_admin_action(admin_id: int, action: str, target_id: Optional[int] = None, details: Optional[Dict[str, Any]] = None):
    """
    –õ–æ–≥–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    
    Args:
        admin_id: ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –≤—ã–ø–æ–ª–Ω–∏–≤—à–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–µ
        action: –ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        target_id: ID –æ–±—ä–µ–∫—Ç–∞, –Ω–∞–¥ –∫–æ—Ç–æ—Ä—ã–º –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∑–∞–∫–∞–∑ –∏ —Ç.–¥.)
        details: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è –æ –¥–µ–π—Å—Ç–≤–∏–∏
    """
    log_data = {
        'admin_id': admin_id,
        'action': action,
        'timestamp': datetime.now().isoformat()
    }
    
    if target_id is not None:
        log_data['target_id'] = target_id
        
    if details:
        log_data['details'] = details
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    admin_logger.info(json.dumps(log_data))
    
    # –ï—Å–ª–∏ —ç—Ç–æ –≤–∞–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    important_actions = ['delete_user', 'delete_order', 'add_admin', 'block_user']
    if action in important_actions:
        try:
            from database import get_user
            admin = get_user(admin_id)
            admin_name = f"{admin.get('first_name', '')} {admin.get('last_name', '')}"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if action == 'delete_user' and target_id:
                target = get_user(target_id)
                target_name = f"{target.get('first_name', '')} {target.get('last_name', '')}"
                message = f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_name} —É–¥–∞–ª–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_name} (ID: {target_id})"
            elif action == 'delete_order' and target_id:
                message = f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_name} —É–¥–∞–ª–∏–ª –∑–∞–∫–∞–∑ #{target_id}"
            elif action == 'add_admin' and target_id:
                target = get_user(target_id)
                target_name = f"{target.get('first_name', '')} {target.get('last_name', '')}"
                message = f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_name} –Ω–∞–∑–Ω–∞—á–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_name} (ID: {target_id}) –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
            elif action == 'block_user' and target_id:
                target = get_user(target_id)
                target_name = f"{target.get('first_name', '')} {target.get('last_name', '')}"
                message = f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_name} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_name} (ID: {target_id})"
            else:
                message = f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_name} –≤—ã–ø–æ–ª–Ω–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ {action}"
                if target_id:
                    message += f" —Å –æ–±—ä–µ–∫—Ç–æ–º ID: {target_id}"
                    
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if details:
                message += "\n–î–µ—Ç–∞–ª–∏: " + json.dumps(details, ensure_ascii=False)
                
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            notify_info(message, user_id=admin_id)
        except Exception as e:
            error_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–µ–π—Å—Ç–≤–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    notify_warning("–¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", context={"test": True})
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞
        1/0
    except Exception as e:
        notify_error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å", exception=e)
        
    print("–¢–µ—Å—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –≤—ã–ø–æ–ª–Ω–µ–Ω—ã.")