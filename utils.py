import re
from typing import List, Dict, Tuple, Optional
from database import get_user_role, get_all_users

def is_admin(user_id: int) -> bool:
    """Check if a user is an admin"""
    role = get_user_role(user_id)
    return role == 'admin'

def get_main_menu_keyboard(user_id: int):
    """Get the main menu keyboard based on user role"""
    from telepot.namedtuple import InlineKeyboardButton, InlineKeyboardMarkup
    
    # –û–±—â–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    buttons = [
        [InlineKeyboardButton(text="üìù –ù–æ–≤—ã–π –∑–∞–∫–∞–∑", callback_data="new_order")],
        [InlineKeyboardButton(text="üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="my_orders")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    if is_admin(user_id):
        admin_buttons = [
            [InlineKeyboardButton(text="üë®‚Äçüíº –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏", callback_data="manage_orders")],
            [InlineKeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="manage_users")]
        ]
        buttons = admin_buttons + buttons
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_order_status_keyboard(order_id: int):
    """Get keyboard for updating order status"""
    from telepot.namedtuple import InlineKeyboardButton, InlineKeyboardMarkup
    
    buttons = [
        [
            InlineKeyboardButton(text="‚öôÔ∏è –í —Ä–∞–±–æ—Ç–µ", callback_data=f"status_{order_id}_processing"),
            InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω", callback_data=f"status_{order_id}_completed")
        ],
        [
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–µ–Ω", callback_data=f"status_{order_id}_cancelled")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="manage_orders")
        ]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_order_management_keyboard(order_id: int):
    """Get keyboard for order management"""
    from telepot.namedtuple import InlineKeyboardButton, InlineKeyboardMarkup
    
    buttons = [
        [
            InlineKeyboardButton(text="üìä –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"change_status_{order_id}")
        ],
        [
            InlineKeyboardButton(text="üí∞ –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å", callback_data=f"add_cost_{order_id}"),
            InlineKeyboardButton(text="üìù –î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"add_description_{order_id}")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="manage_orders")
        ]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_back_to_main_menu_keyboard():
    """Get keyboard with only a back button to main menu"""
    from telepot.namedtuple import InlineKeyboardButton, InlineKeyboardMarkup
    
    buttons = [
        [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_user_management_keyboard():
    """Get keyboard for user management"""
    from telepot.namedtuple import InlineKeyboardButton, InlineKeyboardMarkup
    
    buttons = [
        [InlineKeyboardButton(text="üë®‚Äçüíº –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="add_admin")],
        [InlineKeyboardButton(text="üë§ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="list_users")],
        [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def send_order_notification_to_admins(bot, order_id: int):
    """Send a notification to all admins about a new order"""
    from database import get_order
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    order_data = get_order(order_id)
    if not order_data:
        return
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Order –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    from models import Order
    order = Order.from_dict(order_data)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
    admins = [user for user in get_all_users() if user['role'] == 'admin']
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = f"üÜï <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}</b>\n\n"
    message += f"üë§ –ö–ª–∏–µ–Ω—Ç: {order.client_name}\n"
    message += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order.client_phone}\n"
    message += f"üè† –ê–¥—Ä–µ—Å: {order.client_address}\n\n"
    message += f"üîß –ü—Ä–æ–±–ª–µ–º–∞: {order.problem_description}\n"
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–º
    keyboard = get_order_management_keyboard(order_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
    for admin in admins:
        try:
            bot.sendMessage(
                admin['user_id'],
                message,
                parse_mode='HTML',
                reply_markup=keyboard
            )
        except Exception as e:
            print(f"Error sending notification to admin {admin['user_id']}: {e}")

def validate_phone(phone: str) -> bool:
    """Validate phone number format"""
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    clean_phone = re.sub(r'\D', '', phone)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–ª–µ—Ñ–æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç 10-12 —Ü–∏—Ñ—Ä
    if 10 <= len(clean_phone) <= 12:
        return True
    
    return False

def format_orders_list(orders: List[Dict], show_buttons: bool = True) -> Tuple[str, Optional[dict]]:
    """Format a list of orders for display"""
    from telepot.namedtuple import InlineKeyboardButton, InlineKeyboardMarkup
    
    if not orders:
        return "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.", get_back_to_main_menu_keyboard() if show_buttons else None
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    message = "<b>–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤:</b>\n\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    buttons = []
    
    for order in orders:
        # –≠–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞
        status_emoji = {
            'new': 'üÜï',
            'processing': '‚öôÔ∏è',
            'completed': '‚úÖ',
            'cancelled': '‚ùå'
        }.get(order['status'], '‚ùì')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message += f"{status_emoji} <b>–ó–∞–∫–∞–∑ #{order['order_id']}</b> - {order['client_name']}\n"
        
        # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞
        if show_buttons:
            buttons.append([InlineKeyboardButton(
                text=f"–ó–∞–∫–∞–∑ #{order['order_id']} - {order['client_name']}",
                callback_data=f"order_{order['order_id']}"
            )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if show_buttons:
        buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")])
        return message, InlineKeyboardMarkup(inline_keyboard=buttons)
    
    return message, None