"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º
"""

import logging
import re
from typing import List, Dict, Tuple, Optional
from config import ROLES, ORDER_STATUSES
from database import get_user_role, get_all_users, get_technicians, get_unapproved_users

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

try:
    # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑ telebot
    from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
except ImportError:
    # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, —Å–æ–∑–¥–∞–µ–º —Å–≤–æ–∏ –∫–ª–∞—Å—Å—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    class InlineKeyboardMarkup:
        def __init__(self, row_width=3):
            self.keyboard = []
            self.row_width = row_width
            
        def add(self, *args):
            for i in range(0, len(args), self.row_width):
                self.keyboard.append(args[i:i+self.row_width])
                
    class InlineKeyboardButton:
        def __init__(self, text, callback_data=None):
            self.text = text
            self.callback_data = callback_data
    
    class ReplyKeyboardMarkup:
        def __init__(self, resize_keyboard=True, one_time_keyboard=False, row_width=3):
            self.keyboard = []
            self.resize_keyboard = resize_keyboard
            self.one_time_keyboard = one_time_keyboard
            self.row_width = row_width
            
        def add(self, *args):
            for i in range(0, len(args), self.row_width):
                self.keyboard.append(args[i:i+self.row_width])
                
    class KeyboardButton:
        def __init__(self, text):
            self.text = text
            
    class types:
        InlineKeyboardMarkup = InlineKeyboardMarkup
        InlineKeyboardButton = InlineKeyboardButton
        ReplyKeyboardMarkup = ReplyKeyboardMarkup
        KeyboardButton = KeyboardButton

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    role = get_user_role(user_id)
    return role == 'admin'

def is_dispatcher(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º"""
    role = get_user_role(user_id)
    return role == 'dispatcher'

def is_technician(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–∞—Å—Ç–µ—Ä–æ–º"""
    role = get_user_role(user_id)
    return role == 'technician'

def get_role_name(role: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ"""
    return ROLES.get(role, role)

def get_status_name(status: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ"""
    return ORDER_STATUSES.get(status, status)

def get_main_menu_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    # –ö–Ω–æ–ø–∫–∞ –ü–æ–º–æ—â—å –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    keyboard.add(InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help"))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if is_admin(user_id):
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        keyboard.add(
            InlineKeyboardButton("üìù –í—Å–µ –∑–∞–∫–∞–∑—ã", callback_data="all_orders"),
            InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="manage_users")
        )
    elif is_dispatcher(user_id):
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤
        keyboard.add(
            InlineKeyboardButton("‚ûï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑", callback_data="new_order"),
            InlineKeyboardButton("üìã –í—Å–µ –∑–∞–∫–∞–∑—ã", callback_data="all_orders")
        )
    elif is_technician(user_id):
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤
        keyboard.add(
            InlineKeyboardButton("üîß –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="my_assigned_orders")
        )
    
    return keyboard
    
def get_reply_keyboard(user_id: int) -> ReplyKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É-–º–µ–Ω—é —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã
    keyboard.add(KeyboardButton("/start"), KeyboardButton("/help"))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if is_admin(user_id):
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        keyboard.add(
            KeyboardButton("/all_orders"),
            KeyboardButton("/manage_users")
        )
    elif is_dispatcher(user_id):
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤
        keyboard.add(
            KeyboardButton("/new_order"),
            KeyboardButton("/all_orders")
        )
    elif is_technician(user_id):
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤
        keyboard.add(KeyboardButton("/my_assigned_orders"))
    
    return keyboard

def get_order_status_keyboard(order_id: int) -> InlineKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
    """
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    keyboard.add(
        InlineKeyboardButton("üîÑ –í —Ä–∞–±–æ—Ç–µ", callback_data=f"status_{order_id}_in_progress"),
        InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω", callback_data=f"status_{order_id}_completed"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–µ–Ω", callback_data=f"status_{order_id}_cancelled"),
        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑—É", callback_data=f"order_{order_id}")
    )
    
    return keyboard

def get_order_management_keyboard(order_id: int) -> InlineKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–º
    """
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    keyboard.add(
        InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"change_status_{order_id}"),
        InlineKeyboardButton("üë§ –ù–∞–∑–Ω–∞—á–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞", callback_data=f"assign_technician_{order_id}"),
        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="all_orders")
    )
    
    return keyboard

def get_technician_order_keyboard(order_id: int) -> InlineKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º –∑–∞–∫–∞–∑–æ–º
    """
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    keyboard.add(
        InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"change_status_{order_id}"),
        InlineKeyboardButton("üí∞ –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å", callback_data=f"add_cost_{order_id}"),
        InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç", callback_data=f"add_description_{order_id}"),
        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="my_assigned_orders")
    )
    
    return keyboard

def get_back_to_main_menu_keyboard() -> InlineKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    """
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
    return keyboard

def get_user_management_keyboard() -> InlineKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    """
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    keyboard.add(
        InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="list_users"),
        InlineKeyboardButton("‚úÖ –ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", callback_data="approval_requests"),
        InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="add_admin"),
        InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞", callback_data="add_dispatcher"),
        InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞", callback_data="add_technician"),
        InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    )
    
    return keyboard

def get_approval_requests_keyboard() -> Tuple[str, Optional[InlineKeyboardMarkup]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    unapproved_users = get_unapproved_users()
    
    if not unapproved_users:
        message = "üìã –ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ\n\n–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ."
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="manage_users"))
        return message, keyboard
    
    message = "üìã –ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ\n\n"
    for user in unapproved_users:
        username_info = f" (@{user.username})" if user.username else ""
        message += f"üë§ {user.get_full_name()}{username_info} - {get_role_name(user.role)}\n"
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    
    for user in unapproved_users:
        name = user.get_full_name()
        if len(name) > 15:  # –£–∫–æ—Ä–∞—á–∏–≤–∞–µ–º –∏–º—è –¥–ª—è –∫–Ω–æ–ø–∫–∏
            name = name[:12] + "..."
            
        keyboard.add(
            InlineKeyboardButton(f"‚úÖ {name}", callback_data=f"approve_{user.user_id}"),
            InlineKeyboardButton(f"‚ùå {name}", callback_data=f"reject_{user.user_id}")
        )
    
    keyboard.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="manage_users"))
    
    return message, keyboard

def get_technician_list_keyboard(order_id: int) -> InlineKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –º–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    """
    technicians = get_technicians()
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    for tech in technicians:
        name = tech.get_full_name()
        if len(name) > 20:  # –£–∫–æ—Ä–∞—á–∏–≤–∞–µ–º –∏–º—è –¥–ª—è –∫–Ω–æ–ø–∫–∏
            name = name[:17] + "..."
            
        keyboard.add(InlineKeyboardButton(name, callback_data=f"assign_{order_id}_{tech.user_id}"))
    
    keyboard.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑—É", callback_data=f"order_{order_id}"))
    
    return keyboard

def send_order_notification_to_admins(bot, order_id: int) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
    """
    from database import get_order
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = get_all_users()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
    order = get_order(order_id)
    
    if not order:
        return
    
    message = f"üîî –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order.order_id}\n\n{order.format_for_display(user_role='admin')}"
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üëÅÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑", callback_data=f"order_{order_id}"))
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    for user in users:
        if user.is_admin():
            try:
                bot.send_message(user.user_id, message, reply_markup=keyboard)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {user.user_id}: {e}")

def validate_phone(phone: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    """
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏
    digits_only = re.sub(r'\D', '', phone)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É (–æ—Ç 10 –¥–æ 15 —Ü–∏—Ñ—Ä)
    return 10 <= len(digits_only) <= 15

def format_orders_list(orders: List[Dict], show_buttons: bool = True) -> Tuple[str, Optional[InlineKeyboardMarkup]]:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    if not orders:
        message = "üìã –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤\n\n–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
        return message, keyboard
    
    message = "üìã –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤\n\n"
    keyboard = None
    
    if show_buttons:
        keyboard = InlineKeyboardMarkup(row_width=2)
    
    for order in orders:
        status_emoji = "üîÑ"
        if order.status == "new":
            status_emoji = "üÜï"
        elif order.status == "assigned":
            status_emoji = "üìå"
        elif order.status == "in_progress":
            status_emoji = "üîß"
        elif order.status == "completed":
            status_emoji = "‚úÖ"
        elif order.status == "cancelled":
            status_emoji = "‚ùå"
            
        message += f"{status_emoji} –ó–∞–∫–∞–∑ #{order.order_id} - {order.status_to_russian()}\n"
        message += f"üë§ {order.client_name} | üì± {order.client_phone}\n"
        message += f"üè† {order.client_address}\n"
        
        if show_buttons:
            keyboard.add(InlineKeyboardButton(f"–ó–∞–∫–∞–∑ #{order.order_id}", callback_data=f"order_{order.order_id}"))
        
        message += "\n"
    
    if show_buttons:
        keyboard.add(InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
    
    return message, keyboard