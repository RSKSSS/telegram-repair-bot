import re
import logging
from typing import List, Dict, Tuple, Optional
try:
    from telebot import types
except ImportError:
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –±–µ–∑ —Ç–µ–ª–µ–±–æ—Ç–∞
    class InlineKeyboardMarkup:
        def __init__(self, row_width=3):
            self.row_width = row_width
            self.keyboard = []
        
        def add(self, *args):
            self.keyboard.extend(args)
            return self
    
    class InlineKeyboardButton:
        def __init__(self, text, callback_data=None):
            self.text = text
            self.callback_data = callback_data
    
    class types:
        InlineKeyboardMarkup = InlineKeyboardMarkup
        InlineKeyboardButton = InlineKeyboardButton
from config import ROLES, ORDER_STATUSES
from database import (
    get_user_role, get_all_users, get_order, is_user_approved,
    approve_user, reject_user, get_unapproved_users
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return get_user_role(user_id) == 'admin'

def is_dispatcher(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º"""
    return get_user_role(user_id) == 'dispatcher'

def is_technician(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ—Ö–Ω–∏–∫–æ–º"""
    return get_user_role(user_id) == 'technician'

def get_role_name(role: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ"""
    return ROLES.get(role, role)

def get_status_name(status: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ"""
    return ORDER_STATUSES.get(status, status)

def get_main_menu_keyboard(user_id: int) -> types.InlineKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    
    # –û–±—â–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    keyboard.add(types.InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help"))
    
    role = get_user_role(user_id)
    
    if role == 'admin':
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        keyboard.add(
            types.InlineKeyboardButton("üìã –í—Å–µ –∑–∞–∫–∞–∑—ã", callback_data="all_orders"),
            types.InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="manage_users")
        )
    elif role == 'dispatcher':
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        keyboard.add(
            types.InlineKeyboardButton("‚ûï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑", callback_data="new_order"),
            types.InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="my_orders")
        )
    elif role == 'technician':
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ—Ö–Ω–∏–∫–∞
        keyboard.add(types.InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="my_assigned_orders"))
    
    return keyboard

def get_order_status_keyboard(order_id: int) -> types.InlineKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
    """
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    
    order = get_order(order_id)
    if not order:
        return keyboard
    
    current_status = order['status']
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ—é—Ç —Å–º—ã—Å–ª –≤ —Ç–µ–∫—É—â–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    if current_status == 'new':
        keyboard.add(types.InlineKeyboardButton("üîÑ –í —Ä–∞–±–æ—Ç–µ", callback_data=f"status_{order_id}_in_progress"))
    elif current_status == 'assigned':
        keyboard.add(types.InlineKeyboardButton("üîÑ –í —Ä–∞–±–æ—Ç–µ", callback_data=f"status_{order_id}_in_progress"))
    elif current_status == 'in_progress':
        keyboard.add(types.InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω", callback_data=f"status_{order_id}_completed"))
    
    # –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã, –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω –∏ –Ω–µ –æ—Ç–º–µ–Ω–µ–Ω
    if current_status not in ['completed', 'cancelled']:
        keyboard.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–µ–Ω", callback_data=f"status_{order_id}_cancelled"))
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –¥–µ—Ç–∞–ª—è–º –∑–∞–∫–∞–∑–∞
    keyboard.add(types.InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"order_{order_id}"))
    
    return keyboard

def get_order_management_keyboard(order_id: int) -> types.InlineKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–º
    """
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    
    order = get_order(order_id)
    if not order:
        return keyboard
    
    current_status = order['status']
    
    # –ö–Ω–æ–ø–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
    keyboard.add(types.InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"change_status_{order_id}"))
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏–∫–∞
    keyboard.add(types.InlineKeyboardButton("üë®‚Äçüîß –ù–∞–∑–Ω–∞—á–∏—Ç—å —Ç–µ—Ö–Ω–∏–∫–∞", callback_data=f"assign_technician_{order_id}"))
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏—è —Ä–∞–±–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –≤ —Ä–∞–±–æ—Ç–µ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω
    if current_status in ['in_progress', 'completed']:
        keyboard.add(types.InlineKeyboardButton("üí∞ –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å", callback_data=f"add_cost_{order_id}"))
        keyboard.add(types.InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç", callback_data=f"add_description_{order_id}"))
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤
    keyboard.add(types.InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º", callback_data="all_orders"))
    
    return keyboard

def get_technician_order_keyboard(order_id: int) -> types.InlineKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ç–µ—Ö–Ω–∏–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º –∑–∞–∫–∞–∑–æ–º
    """
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    
    order = get_order(order_id)
    if not order:
        return keyboard
    
    current_status = order['status']
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ—Ö–Ω–∏–∫–∞
    if current_status == 'assigned':
        keyboard.add(types.InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É", callback_data=f"status_{order_id}_in_progress"))
    elif current_status == 'in_progress':
        keyboard.add(types.InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É", callback_data=f"status_{order_id}_completed"))
        keyboard.add(types.InlineKeyboardButton("üí∞ –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å", callback_data=f"add_cost_{order_id}"))
        keyboard.add(types.InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç", callback_data=f"add_description_{order_id}"))
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    keyboard.add(types.InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º", callback_data="my_assigned_orders"))
    
    return keyboard

def get_back_to_main_menu_keyboard() -> types.InlineKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    """
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
    return keyboard

def get_user_management_keyboard() -> types.InlineKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    """
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    unapproved_users = get_unapproved_users()
    unapproved_count = len(unapproved_users)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard.add(
        types.InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="list_users"),
        types.InlineKeyboardButton(f"üîî –ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ({unapproved_count})", callback_data="approval_requests"),
        types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="add_admin"),
        types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞", callback_data="add_dispatcher"),
        types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Ö–Ω–∏–∫–∞", callback_data="add_technician"),
        types.InlineKeyboardButton("‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    )
    return keyboard

def get_approval_requests_keyboard() -> Tuple[str, Optional[types.InlineKeyboardMarkup]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    unapproved_users = get_unapproved_users()
    
    if not unapproved_users:
        return "üîî *–°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—É—Å—Ç*", None
    
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    message = "üîî *–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*\n\n"
    
    for i, user in enumerate(unapproved_users):
        name = user['first_name']
        if user['last_name']:
            name += f" {user['last_name']}"
        
        username = f"@{user['username']}" if user['username'] else "–±–µ–∑ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        role = get_role_name(user['role'])
        
        message += (
            f"{i+1}. *{name}* ({username})\n"
            f"   –†–æ–ª—å: {role}\n"
            f"   ID: `{user['user_id']}`\n\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        keyboard.add(
            types.InlineKeyboardButton(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å {name}", callback_data=f"approve_{user['user_id']}"),
            types.InlineKeyboardButton(f"‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å {name}", callback_data=f"reject_{user['user_id']}")
        )
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    keyboard.add(types.InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="manage_users"))
    
    return message, keyboard

def get_technician_list_keyboard(order_id: int) -> types.InlineKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–µ—Ö–Ω–∏–∫–æ–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    """
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Ç–µ—Ö–Ω–∏–∫–æ–≤
    technicians = [user for user in get_all_users() if user['role'] == 'technician']
    
    for tech in technicians:
        name = tech['first_name']
        if tech['last_name']:
            name += f" {tech['last_name']}"
        keyboard.add(types.InlineKeyboardButton(
            f"{name}", callback_data=f"assign_{order_id}_{tech['user_id']}"
        ))
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –¥–µ—Ç–∞–ª—è–º –∑–∞–∫–∞–∑–∞
    keyboard.add(types.InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"order_{order_id}"))
    
    return keyboard

def send_order_notification_to_admins(bot, order_id: int) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
    """
    order = get_order(order_id)
    if not order:
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    admins = [user for user in get_all_users() if user['role'] == 'admin']
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = (
        f"‚ö†Ô∏è *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}* ‚ö†Ô∏è\n\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {order['client_phone']}\n"
        f"üë§ –ö–ª–∏–µ–Ω—Ç: {order['client_name']}\n"
        f"üè† –ê–¥—Ä–µ—Å: {order['client_address']}\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π: /order_{order_id}"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    for admin in admins:
        try:
            bot.send_message(admin['user_id'], message, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin['user_id']}: {e}")

def validate_phone(phone: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    """
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –Ω–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, +, - –∏ –ø—Ä–æ–±–µ–ª—ã
    # –∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 7 —Å–∏–º–≤–æ–ª–æ–≤
    phone = phone.strip()
    if len(phone) < 7:
        return False
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å —Ö–æ—Ç—è –±—ã 7 —Ü–∏—Ñ—Ä
    digits_only = re.sub(r'\D', '', phone)
    return len(digits_only) >= 7

def format_orders_list(orders: List[Dict], show_buttons: bool = True) -> Tuple[str, Optional[types.InlineKeyboardMarkup]]:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    if not orders:
        return "üìã *–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø—É—Å—Ç*", None
    
    keyboard = types.InlineKeyboardMarkup(row_width=1) if show_buttons else None
    
    message = "üìã *–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤:*\n\n"
    
    for i, order in enumerate(orders):
        status_text = ORDER_STATUSES.get(order['status'], order['status'])
        
        # –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ
        message += (
            f"{i+1}. *–ó–∞–∫–∞–∑ #{order['order_id']}* - {status_text}\n"
            f"   üì± {order['client_phone']} - {order['client_name']}\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å, –µ—Å–ª–∏ –æ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞
        if order['service_cost']:
            message += f"   üí∞ {order['service_cost']} —Ä—É–±.\n"
        
        message += "\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞
        if show_buttons:
            keyboard.add(types.InlineKeyboardButton(
                f"–ó–∞–∫–∞–∑ #{order['order_id']} - {order['client_name']}",
                callback_data=f"order_{order['order_id']}"
            ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if show_buttons:
        keyboard.add(types.InlineKeyboardButton("‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
    
    return message, keyboard