#!/usr/bin/env python
"""
–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è Telegram –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –≤ —Å—Ä–µ–¥–µ Render.
–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å, –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ 
–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API –∏ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
"""

import os
import sys
import logging
import telebot
import psycopg2
import sqlite3
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
if not TOKEN or ':' not in TOKEN:
    # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (—Ç–æ—Ç –∂–µ, —á—Ç–æ –≤ shared_state.py)
    TOKEN = "8158789441:AAGlPsdPmgTKXtugoa3qlVwb4ee2vW3mL9g"
    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω (–¥–ª–∏–Ω–∞: {len(TOKEN)})")
else:
    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–¥–ª–∏–Ω–∞: {len(TOKEN)})")

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def is_postgres():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ PostgreSQL"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è RENDER
    if os.environ.get('RENDER') == 'true':
        return True
    # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ DATABASE_URL
    if os.environ.get('DATABASE_URL') and 'postgres' in os.environ.get('DATABASE_URL', ''):
        return True
    return False  # –í –ª–æ–∫–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º SQLite

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def get_connection():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö (PostgreSQL –∏–ª–∏ SQLite)"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å PostgreSQL
        if is_postgres():
            # –í Render –∏—Å–ø–æ–ª—å–∑—É–µ–º PostgreSQL
            logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL –≤ —Å—Ä–µ–¥–µ Render...")
            database_url = os.environ.get('DATABASE_URL')
            conn = psycopg2.connect(database_url)
            return conn
        else:
            # –í –ª–æ–∫–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º SQLite
            logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥–µ...")
            conn = sqlite3.connect('service_bot.db')
            return conn
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL, –∏—Å–ø–æ–ª—å–∑—É–µ–º SQLite
        logger.warning("–ò—Å–ø–æ–ª—å–∑—É—é –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç - SQLite")
        conn = sqlite3.connect('service_bot.db')
        return conn

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def initialize_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = get_connection()
    cursor = conn.cursor()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ PostgreSQL
    use_postgres = is_postgres()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if use_postgres:
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS test_table (
            id SERIAL PRIMARY KEY,
            message TEXT NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
        """)
    else:
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS test_table (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            message TEXT NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
        """)
    
    conn.commit()
    conn.close()
    logger.info("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def add_test_record(message_text):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    conn = get_connection()
    cursor = conn.cursor()
    
    try:
        if is_postgres():
            cursor.execute(
                "INSERT INTO test_table (message) VALUES (%s) RETURNING id",
                (message_text,)
            )
            result = cursor.fetchone()
            record_id = result[0] if result else None
        else:
            cursor.execute(
                "INSERT INTO test_table (message) VALUES (?)",
                (message_text,)
            )
            record_id = cursor.lastrowid
            
        conn.commit()
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å: {record_id}")
        return record_id
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–ø–∏—Å–∏: {e}")
        return None
    finally:
        conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def handle_start(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    username = message.from_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} (ID: {user_id})")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    try:
        record_id = add_test_record(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")
        db_status = f"‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ë–î (ID: {record_id})" if record_id else "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ë–î"
    except Exception as e:
        db_status = f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î: {e}"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.reply_to(
        message,
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –≠—Ç–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.\n\n"
        f"‚û°Ô∏è –í–µ—Ä—Å–∏—è telebot: {getattr(telebot, '__version__', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')}\n"
        f"‚û°Ô∏è –¢–æ–∫–µ–Ω: {'–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π' if TOKEN and ':' in TOKEN else '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π'} (–¥–ª–∏–Ω–∞: {len(TOKEN)})\n"
        f"‚û°Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {'PostgreSQL' if is_postgres() else 'SQLite'}\n"
        f"‚û°Ô∏è –°—Ç–∞—Ç—É—Å –ë–î: {db_status}\n\n"
        f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        f"/start - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        f"/ping - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –±–æ—Ç–∞\n"
        f"/info - –ü–æ–∫–∞–∑–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ping
@bot.message_handler(commands=['ping'])
def handle_ping(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ping"""
    current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    bot.reply_to(
        message,
        f"üü¢ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!\n–í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {current_time}"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /info
@bot.message_handler(commands=['info'])
def handle_info(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /info –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
    import platform
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try:
        conn = get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM test_table")
        result = cursor.fetchone()
        records_count = result[0] if result else 0
        conn.close()
        db_status = f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ ({records_count} –∑–∞–ø–∏—Å–µ–π)"
    except Exception as e:
        db_status = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    env_vars = [
        f"RENDER: {os.environ.get('RENDER', '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞')}",
        f"DATABASE_URL: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞' if os.environ.get('DATABASE_URL') else '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}",
        f"TELEGRAM_BOT_TOKEN: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞' if os.environ.get('TELEGRAM_BOT_TOKEN') else '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}"
    ]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ Markdown-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    info_message = (
        "üìä –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n"
        f"üîπ Python: {platform.python_version()}\n"
        f"üîπ OS: {platform.system()} {platform.release()}\n"
        f"üîπ Telebot –≤–µ—Ä—Å–∏—è: {getattr(telebot, '__version__', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')}\n"
        f"üîπ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {'PostgreSQL' if is_postgres() else 'SQLite'}\n"
        f"üîπ –°—Ç–∞—Ç—É—Å –ë–î: {db_status}\n\n"
        "üî∏ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:\n"
    )
    
    for env_var in env_vars:
        info_message += f"- {env_var}\n"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ parse_mode, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    bot.reply_to(message, info_message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True, content_types=['text'])
def handle_all_messages(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    bot.reply_to(
        message,
        f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏: {message.text}\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
    )

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ Telegram –±–æ—Ç–∞...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        initialize_database()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
        if not TOKEN or ':' not in TOKEN:
            logger.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞!")
            return False
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info(f"–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling —Å —Ç–æ–∫–µ–Ω–æ–º –¥–ª–∏–Ω–æ–π {len(TOKEN)}...")
        bot.infinity_polling()
        
        return True
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return False

if __name__ == "__main__":
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∫—Ä–∏–ø—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é"""
    success = main()
    
    if not success:
        logger.error("–ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫!")
        sys.exit(1)