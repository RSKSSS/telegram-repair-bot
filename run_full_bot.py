#!/usr/bin/env python
"""
–ü—Ä—è–º–æ–π –∑–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –±–æ—Ç–∞ –±–µ–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
"""

import os
import logging
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
token = os.environ.get('TELEGRAM_BOT_TOKEN')
if not token:
    logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    sys.exit(1)

logger.info(f"–¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω (–¥–ª–∏–Ω–∞: {len(token)})")
logger.info("–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –±–æ—Ç–∞...")

# –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
try:
    from config import ROLES, ORDER_STATUSES
    from database import (
        save_user, get_user, get_all_users, get_user_role, is_user_approved,
        get_unapproved_users, approve_user, reject_user, update_user_role,
        save_order, update_order, get_order, get_orders_by_user, get_all_orders,
        get_assigned_orders, assign_order, get_technicians, get_order_technicians,
        set_user_state, get_user_state, get_current_order_id, clear_user_state,
        save_problem_template, update_problem_template, get_problem_template,
        get_problem_templates, delete_problem_template, delete_user, delete_order,
        add_activity_log, get_activity_logs, get_admin_activity_summary
    )
    from utils import (
        get_main_menu_keyboard, get_order_status_keyboard, get_order_management_keyboard,
        get_technician_order_keyboard, get_back_to_main_menu_keyboard, get_approval_requests_keyboard,
        get_user_management_keyboard, is_admin, is_dispatcher, is_technician,
        send_order_notification_to_admins, validate_phone, format_orders_list, get_technician_list_keyboard,
        get_role_name, get_user_list_for_deletion, get_order_list_for_deletion
    )
    from shared_state import bot
    from telebot import types
    from ai_commands import (
        register_ai_commands, handle_cancel_command
    )
    
    logger.info("–í—Å–µ –º–æ–¥—É–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
except ImportError as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª–µ–π: {e}")
    sys.exit(1)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
def get_full_name(user):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    first_name = user.get('first_name', '')
    last_name = user.get('last_name', '')
    
    if first_name and last_name:
        return f"{first_name} {last_name}"
    return first_name or last_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

def updated_format_orders_list(orders, include_details=True):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    if not orders:
        return "üìã –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø—É—Å—Ç"
    
    result = "üìã *–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤:*\n\n"
    
    for order in orders:
        order_id = order.get('order_id', '–ù–µ—Ç ID')
        status = order.get('status', '–ù–µ—Ç —Å—Ç–∞—Ç—É—Å–∞')
        status_emoji = {
            'new': 'üÜï',
            'in_progress': 'üîÑ',
            'completed': '‚úÖ',
            'cancelled': '‚ùå'
        }.get(status, '‚ùì')
        
        client_name = order.get('client_name', '–ù–µ—Ç –∏–º–µ–Ω–∏')
        problem_description = order.get('problem_description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
        
        # –ö–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Å–ø–∏—Å–∫–∞
        short_desc = problem_description[:50] + "..." if len(problem_description) > 50 else problem_description
        
        result += f"{status_emoji} *–ó–∞–∫–∞–∑ #{order_id}* - {client_name}\n"
        result += f"–°—Ç–∞—Ç—É—Å: *{ORDER_STATUSES.get(status, status)}*\n"
        
        if include_details:
            result += f"–û–ø–∏—Å–∞–Ω–∏–µ: {short_desc}\n"
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Å—Ç–µ—Ä–µ
            technician_id = order.get('technician_id')
            if technician_id:
                try:
                    technician = get_user(technician_id)
                    if technician:
                        tech_name = get_full_name(technician)
                        result += f"–ú–∞—Å—Ç–µ—Ä: {tech_name}\n"
                except Exception as e:
                    result += "–ú–∞—Å—Ç–µ—Ä: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö\n"
        
        result += "\n"
    
    return result

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def handle_start_command(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    """
    user_id = message.from_user.id
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name or ""
    username = message.from_user.username

    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –ë–î
        save_user(user_id, first_name, last_name, username)

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user = get_user(user_id)

        if not user:
            bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        greeting = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {first_name}!"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    if user['is_approved']:
        # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
        from utils import get_reply_keyboard
        reply_keyboard = get_reply_keyboard(user_id)

        if is_admin(user_id):
            bot.send_message(
                user_id,
                f"{greeting}\n–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä*.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_keyboard,
                parse_mode="Markdown"
            )
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ—â–µ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            bot.send_message(
                user_id,
                "üì≤ *–ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º:*",
                reply_markup=get_main_menu_keyboard(user_id),
                parse_mode="Markdown"
            )
        elif is_dispatcher(user_id):
            bot.send_message(
                user_id,
                f"{greeting}\n–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ *–î–∏—Å–ø–µ—Ç—á–µ—Ä*.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_keyboard,
                parse_mode="Markdown"
            )
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ—â–µ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            bot.send_message(
                user_id,
                "üì≤ *–ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º:*",
                reply_markup=get_main_menu_keyboard(user_id),
                parse_mode="Markdown"
            )
        elif is_technician(user_id):
            bot.send_message(
                user_id,
                f"{greeting}\n–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ *–ú–∞—Å—Ç–µ—Ä*.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_keyboard,
                parse_mode="Markdown"
            )
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ—â–µ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            bot.send_message(
                user_id,
                "üì≤ *–ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º:*",
                reply_markup=get_main_menu_keyboard(user_id),
                parse_mode="Markdown"
            )
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω
        bot.send_message(
            user_id,
            f"{greeting}\n\n–í–∞—à–∞ —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. "
            "–í–∞–º –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏."
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        admins = [user for user in get_all_users() if user['role'] == 'admin']

        if admins:
            username_info = f" (@{username})" if username else ""
            notification = (
                f"üîî –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–∏—Å—Ç–µ–º–µ\n\n"
                f"üë§ {first_name} {last_name or ''}{username_info}\n"
                f"üÜî ID: {user_id}\n\n"
            )

            # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø—Ä–∏–Ω—è—Ç—å/–æ—Ç–∫–∞–∑–∞—Ç—å
            from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
            keyboard = InlineKeyboardMarkup(row_width=2)
            approve_button = InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"approve_{user_id}")
            reject_button = InlineKeyboardButton(text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å", callback_data=f"reject_{user_id}")
            keyboard.add(approve_button, reject_button)
            keyboard.add(InlineKeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="manage_users"))

            for admin in admins:
                try:
                    bot.send_message(admin['user_id'], notification, reply_markup=keyboard)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin['user_id']}: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@bot.message_handler(commands=['help'])
def handle_help_command(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
    """
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    user = get_user(user_id)

    if not user or not user['is_approved']:
        bot.reply_to(
            message,
            "–í–∞—à–∞ —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
        )
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–ø—Ä–∞–≤–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    help_text = "üîç –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞\n\n"

    # –û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    help_text += "–û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
    help_text += "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
    help_text += "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"

    # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    if is_admin(user_id):
        help_text += "–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
        help_text += "/all_orders - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤\n"
        help_text += "/manage_users - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n"
        help_text += "/add_template - –î–æ–±–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω –ø—Ä–æ–±–ª–µ–º—ã\n"
        help_text += "/templates - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏ –ø—Ä–æ–±–ª–µ–º\n"
        help_text += "/activity_log - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n"
    elif is_dispatcher(user_id):
        help_text += "–ö–æ–º–∞–Ω–¥—ã –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞:\n"
        help_text += "/new_order - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑\n"
        help_text += "/all_orders - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤\n"
        help_text += "/assign_order - –ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–∫–∞–∑ –º–∞—Å—Ç–µ—Ä—É\n"
        help_text += "/add_template - –î–æ–±–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω –ø—Ä–æ–±–ª–µ–º—ã\n"
        help_text += "/templates - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏ –ø—Ä–æ–±–ª–µ–º\n"
    elif is_technician(user_id):
        help_text += "–ö–æ–º–∞–Ω–¥—ã –º–∞—Å—Ç–µ—Ä–∞:\n"
        help_text += "/my_orders - –ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –≤–∞–º –∑–∞–∫–∞–∑–æ–≤\n"
        help_text += "/update_status - –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞\n"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø—Ä–∞–≤–∫—É
    bot.send_message(user_id, help_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /manage_users (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
@bot.message_handler(commands=['manage_users'])
def handle_manage_users_command(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /manage_users
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
    """
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not is_admin(user_id):
        bot.reply_to(message, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    keyboard = get_user_management_keyboard()
    bot.send_message(
        user_id, 
        "üë• *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /info –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
@bot.message_handler(commands=['info'])
def handle_info_command(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /info
    –í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    """
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user = get_user(user_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    info_text = "üìä *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ*\n\n"
    
    if user:
        info_text += f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {user.get('first_name')} {user.get('last_name') or ''}\n"
        info_text += f"üÜî ID: `{user_id}`\n"
        info_text += f"üëë –†–æ–ª—å: {get_role_name(user.get('role', 'user'))}\n"
        info_text += f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: {'–î–∞' if user.get('is_approved') else '–ù–µ—Ç'}\n\n"
    else:
        info_text += "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
    import platform
    info_text += f"üñ•Ô∏è *–°–∏—Å—Ç–µ–º–∞:*\n"
    info_text += f"–û–°: {platform.system()} {platform.release()}\n"
    info_text += f"Python: {platform.python_version()}\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try:
        users_count = len(get_all_users())
        orders_count = len(get_all_orders())
        info_text += f"\nüìù *–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:*\n"
        info_text += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}\n"
        info_text += f"–ó–∞–∫–∞–∑–æ–≤: {orders_count}\n"
    except Exception as e:
        info_text += f"\n‚ùå *–û—à–∏–±–∫–∞ –ë–î:* {str(e)}\n"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    bot.send_message(user_id, info_text, parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline-–∫–Ω–æ–ø–æ–∫
    """
    user_id = call.from_user.id
    message_id = call.message.message_id
    callback_data = call.data
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback: {callback_data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if callback_data.startswith("approve_"):
            user_id_part = callback_data.split("_")[1]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —ç—Ç–æ —á–∏—Å–ª–æ
            if user_id_part == "unknown" or not user_id_part.isdigit():
                bot.answer_callback_query(call.id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                bot.edit_message_text(
                    "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.",
                    user_id,
                    message_id,
                    reply_markup=get_back_to_main_menu_keyboard()
                )
                return
                
            try:
                target_user_id = int(user_id_part)
                approve_user(target_user_id)
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                target_user = get_user(target_user_id)
                user_name = f"{target_user['first_name']} {target_user.get('last_name', '')}" if target_user else str(target_user_id)
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                bot.edit_message_text(
                    f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!",
                    user_id,
                    message_id,
                    reply_markup=get_back_to_main_menu_keyboard()
                )
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try:
                    bot.send_message(
                        target_user_id,
                        "‚úÖ –í–∞—à–∞ —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
                bot.answer_callback_query(call.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                
        elif callback_data.startswith("reject_"):
            user_id_part = callback_data.split("_")[1]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —ç—Ç–æ —á–∏—Å–ª–æ
            if user_id_part == "unknown" or not user_id_part.isdigit():
                bot.answer_callback_query(call.id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                bot.edit_message_text(
                    "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è. ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.",
                    user_id,
                    message_id,
                    reply_markup=get_back_to_main_menu_keyboard()
                )
                return
                
            try:
                target_user_id = int(user_id_part)
                reject_user(target_user_id)
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                target_user = get_user(target_user_id)
                user_name = f"{target_user['first_name']} {target_user.get('last_name', '')}" if target_user else str(target_user_id)
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                bot.edit_message_text(
                    f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –æ—Ç–∫–ª–æ–Ω–µ–Ω!",
                    user_id,
                    message_id,
                    reply_markup=get_back_to_main_menu_keyboard()
                )
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try:
                    bot.send_message(
                        target_user_id,
                        "‚ùå –í–∞—à–∞ —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
                bot.answer_callback_query(call.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        elif callback_data == "manage_users":
            keyboard = get_user_management_keyboard()
            bot.edit_message_text(
                "üë• *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                user_id,
                message_id,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            
        elif callback_data == "approval_requests":
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            unapproved_users = get_unapproved_users()
            
            if not unapproved_users:
                bot.edit_message_text(
                    "üë• *–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ*\n\n–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
                    user_id,
                    message_id,
                    reply_markup=get_back_to_main_menu_keyboard(),
                    parse_mode="Markdown"
                )
            else:
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                keyboard = types.InlineKeyboardMarkup(row_width=2)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                for user_data in unapproved_users:
                    user_id_str = str(user_data.get('id', 'unknown'))
                    user_name = user_data.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
                    
                    # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
                    approve_button = types.InlineKeyboardButton(
                        f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å {user_name}", 
                        callback_data=f"approve_{user_id_str}"
                    )
                    reject_button = types.InlineKeyboardButton(
                        f"‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å {user_name}", 
                        callback_data=f"reject_{user_id_str}"
                    )
                    
                    keyboard.add(approve_button, reject_button)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
                back_button = types.InlineKeyboardButton(
                    "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", 
                    callback_data="manage_users"
                )
                keyboard.add(back_button)
                
                bot.edit_message_text(
                    "üë• *–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ*\n\n–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:",
                    user_id,
                    message_id,
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
                
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ AI-–∑–∞–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ –º–æ–¥—É–ª—å ai_commands
        elif callback_data.startswith("ai_"):
            bot.answer_callback_query(call.id, "–ò–ò-—Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")
            try:
                from ai_commands import (
                    handle_ai_analyze_problem_callback,
                    handle_ai_suggest_cost_callback,
                    handle_ai_generate_description_callback,
                    handle_ai_technician_help_callback,
                    handle_ai_order_help_callback,
                    handle_set_cost_callback,
                    handle_set_description_callback
                )
                
                if callback_data.startswith("ai_analyze_problem"):
                    handle_ai_analyze_problem_callback(user_id, message_id)
                
                elif callback_data.startswith("ai_suggest_cost"):
                    handle_ai_suggest_cost_callback(user_id, message_id)
                
                elif callback_data.startswith("ai_generate_description"):
                    handle_ai_generate_description_callback(user_id, message_id)
                
                elif callback_data.startswith("ai_technician_help"):
                    handle_ai_technician_help_callback(user_id, message_id)
                
                elif callback_data.startswith("ai_order_help_"):
                    order_id = int(callback_data.split("_")[-1])
                    handle_ai_order_help_callback(user_id, message_id, order_id)
                
                elif callback_data.startswith("set_cost_"):
                    parts = callback_data.split("_")
                    order_id = int(parts[2])
                    cost = float(parts[3])
                    handle_set_cost_callback(user_id, message_id, order_id, cost)
                
                elif callback_data.startswith("set_description_"):
                    order_id = int(callback_data.split("_")[-1])
                    handle_set_description_callback(user_id, message_id, order_id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ AI-–∑–∞–ø—Ä–æ—Å–∞: {e}")
                bot.send_message(user_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ò–ò-–∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏
        elif callback_data == "all_orders":
            orders = get_all_orders()
            if not orders:
                bot.edit_message_text(
                    "üìã *–í—Å–µ –∑–∞–∫–∞–∑—ã*\n\n–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø—É—Å—Ç.",
                    user_id,
                    message_id,
                    reply_markup=get_back_to_main_menu_keyboard(),
                    parse_mode="Markdown"
                )
            else:
                formatted_orders = updated_format_orders_list(orders)
                bot.edit_message_text(
                    f"üìã *–í—Å–µ –∑–∞–∫–∞–∑—ã*\n\n{formatted_orders}",
                    user_id,
                    message_id,
                    reply_markup=get_back_to_main_menu_keyboard(),
                    parse_mode="Markdown"
                )
        
        elif callback_data == "manage_orders":
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏
            create_order_button = types.InlineKeyboardButton(
                "‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑", 
                callback_data="create_order"
            )
            all_orders_button = types.InlineKeyboardButton(
                "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã", 
                callback_data="all_orders"
            )
            delete_order_button = types.InlineKeyboardButton(
                "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑", 
                callback_data="delete_order_menu"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard.add(create_order_button, all_orders_button, delete_order_button)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            back_button = types.InlineKeyboardButton(
                "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
                callback_data="main_menu"
            )
            keyboard.add(back_button)
            
            bot.edit_message_text(
                "üìã *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                user_id,
                message_id,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
        
        elif callback_data == "create_order":
            bot.edit_message_text(
                "üìù *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞*\n\n–°–ª–µ–¥—É–π—Ç–µ –ø–æ—à–∞–≥–æ–≤–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:",
                user_id,
                message_id,
                reply_markup=get_back_to_main_menu_keyboard(),
                parse_mode="Markdown"
            )
            bot.send_message(
                user_id,
                "1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –§–ò–û –∫–ª–∏–µ–Ω—Ç–∞:",
                reply_markup=types.ForceReply(selective=True)
            )
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            from database import set_user_state
            set_user_state(user_id, "creating_order_client_name")
            
        elif callback_data == "help":
            bot.edit_message_text(
                "‚ÑπÔ∏è *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É*\n\n"
                "–ë–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏ –Ω–∞ —Ä–µ–º–æ–Ω—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏.\n\n"
                "*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
                "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
                "/help - –í—ã–≤–µ—Å—Ç–∏ —Å–ø—Ä–∞–≤–∫—É\n"
                "/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ\n\n"
                "*–†–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*\n"
                "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä - –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n"
                "üìû –î–∏—Å–ø–µ—Ç—á–µ—Ä - –ø—Ä–∏–µ–º –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏, —Ä–∞–±–æ—Ç–∞ —Å –∑–∞–∫–∞–∑—á–∏–∫–∞–º–∏\n"
                "üîß –ú–∞—Å—Ç–µ—Ä - –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤, –æ—Ç—á–µ—Ç—ã –æ —Ä–∞–±–æ—Ç–∞—Ö\n\n"
                "*–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:*\n"
                "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏\n"
                "‚Ä¢ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–æ–≤ –Ω–∞ –∑–∞–∫–∞–∑—ã\n"
                "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–æ–≤\n"
                "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö\n"
                "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n\n"
                "*–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n"
                "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª—É—á–∏—Ç—å –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                user_id,
                message_id,
                reply_markup=get_back_to_main_menu_keyboard(),
                parse_mode="Markdown"
            )

        elif callback_data == "activity_logs":
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ database.py –≤–º–µ—Å—Ç–æ activity_log_functions
                from database import get_activity_logs
                logs = get_activity_logs(limit=20)
                
                if not logs:
                    bot.edit_message_text(
                        "üìä *–õ–æ–≥–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏*\n\n–õ–æ–≥–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—É—Å—Ç—ã.",
                        user_id,
                        message_id,
                        reply_markup=get_back_to_main_menu_keyboard(),
                        parse_mode="Markdown"
                    )
                else:
                    logs_text = "\n\n".join([
                        f"*{log.get('timestamp', '–ù/–î')}*\n"
                        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {log.get('user_id', '–ù/–î')}\n"
                        f"üõ† –î–µ–π—Å—Ç–≤–∏–µ: {log.get('action_type', '–ù/–î')}\n"
                        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {log.get('action_description', '–ù/–î')}"
                        for log in logs
                    ])
                    
                    bot.edit_message_text(
                        f"üìä *–õ–æ–≥–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏*\n\n{logs_text}",
                        user_id,
                        message_id,
                        reply_markup=get_back_to_main_menu_keyboard(),
                        parse_mode="Markdown"
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
                import traceback
                logger.error(traceback.format_exc())
                bot.edit_message_text(
                    "‚ö†Ô∏è *–û—à–∏–±–∫–∞*\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.",
                    user_id,
                    message_id,
                    reply_markup=get_back_to_main_menu_keyboard(),
                    parse_mode="Markdown"
                )
                
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        elif callback_data == "list_users":
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = get_all_users()
            if not users:
                bot.edit_message_text(
                    "üë• *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*\n\n–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.",
                    user_id,
                    message_id,
                    reply_markup=get_back_to_main_menu_keyboard(),
                    parse_mode="Markdown"
                )
            else:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                user_text = "\n\n".join([
                    f"*{user.get('first_name')} {user.get('last_name', '')}*\n"
                    f"ID: `{user.get('user_id')}`\n"
                    f"–†–æ–ª—å: {get_role_name(user.get('role', 'user'))}\n"
                    f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω' if user.get('is_approved') else '‚ùå –ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω'}"
                    for user in users
                ])
                
                bot.edit_message_text(
                    f"üë• *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*\n\n{user_text}",
                    user_id,
                    message_id,
                    reply_markup=get_back_to_main_menu_keyboard(),
                    parse_mode="Markdown"
                )
        
        elif callback_data == "add_admin":
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            bot.edit_message_text(
                "üëë *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
                "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:",
                user_id,
                message_id,
                reply_markup=get_back_to_main_menu_keyboard(),
                parse_mode="Markdown"
            )
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from database import set_user_state
            set_user_state(user_id, "adding_admin")
        
        elif callback_data == "add_dispatcher":
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            bot.edit_message_text(
                "üìû *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞*\n\n"
                "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º:",
                user_id,
                message_id,
                reply_markup=get_back_to_main_menu_keyboard(),
                parse_mode="Markdown"
            )
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from database import set_user_state
            set_user_state(user_id, "adding_dispatcher")
        
        elif callback_data == "add_technician":
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            bot.edit_message_text(
                "üîß *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞*\n\n"
                "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –º–∞—Å—Ç–µ—Ä–æ–º:",
                user_id,
                message_id,
                reply_markup=get_back_to_main_menu_keyboard(),
                parse_mode="Markdown"
            )
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from database import set_user_state
            set_user_state(user_id, "adding_technician")
        
        elif callback_data == "delete_user_menu":
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            users = get_all_users()
            if not users:
                bot.edit_message_text(
                    "üóëÔ∏è *–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.",
                    user_id,
                    message_id,
                    reply_markup=get_back_to_main_menu_keyboard(),
                    parse_mode="Markdown"
                )
            else:
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                keyboard = types.InlineKeyboardMarkup(row_width=1)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                for user_data in users:
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è)
                    if int(user_data.get('user_id')) == user_id:
                        continue
                    
                    delete_button = types.InlineKeyboardButton(
                        f"‚ùå {user_data.get('first_name')} ({get_role_name(user_data.get('role', 'user'))})",
                        callback_data=f"delete_user_{user_data.get('user_id')}"
                    )
                    keyboard.add(delete_button)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
                back_button = types.InlineKeyboardButton(
                    "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏",
                    callback_data="manage_users"
                )
                keyboard.add(back_button)
                
                bot.edit_message_text(
                    "üóëÔ∏è *–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                    user_id,
                    message_id,
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
                
        elif callback_data.startswith("delete_user_"):
            # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            target_user_id = int(callback_data.split("_")[2])
            
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if delete_user(target_user_id):
                # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                try:
                    from database import add_activity_log
                    add_activity_log(user_id, "user_delete", f"–£–¥–∞–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id}", related_user_id=target_user_id)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ª–æ–≥–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
                
                bot.edit_message_text(
                    f"‚úÖ *–£—Å–ø–µ—Ö*\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.",
                    user_id,
                    message_id,
                    reply_markup=get_back_to_main_menu_keyboard(),
                    parse_mode="Markdown"
                )
            else:
                bot.edit_message_text(
                    "‚ö†Ô∏è *–û—à–∏–±–∫–∞*\n\n–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                    user_id,
                    message_id,
                    reply_markup=get_back_to_main_menu_keyboard(),
                    parse_mode="Markdown"
                )
                
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏
        elif callback_data == "delete_order_menu":
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            orders = get_all_orders()
            if not orders:
                bot.edit_message_text(
                    "üóëÔ∏è *–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞*\n\n–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø—É—Å—Ç.",
                    user_id,
                    message_id,
                    reply_markup=get_back_to_main_menu_keyboard(),
                    parse_mode="Markdown"
                )
            else:
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞
                keyboard = types.InlineKeyboardMarkup(row_width=1)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞
                for order in orders:
                    delete_button = types.InlineKeyboardButton(
                        f"‚ùå –ó–∞–∫–∞–∑ #{order.get('order_id')} - {order.get('client_name')}",
                        callback_data=f"delete_order_{order.get('order_id')}"
                    )
                    keyboard.add(delete_button)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
                back_button = types.InlineKeyboardButton(
                    "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞–º–∏",
                    callback_data="manage_orders"
                )
                keyboard.add(back_button)
                
                bot.edit_message_text(
                    "üóëÔ∏è *–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                    user_id,
                    message_id,
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
                
        elif callback_data.startswith("delete_order_"):
            # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–∫–∞–∑–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            order_id = int(callback_data.split("_")[2])
            
            # –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑
            if delete_order(order_id):
                # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                try:
                    from database import add_activity_log
                    add_activity_log(user_id, "order_delete", f"–£–¥–∞–ª–µ–Ω –∑–∞–∫–∞–∑ {order_id}", related_order_id=order_id)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ª–æ–≥–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
                
                bot.edit_message_text(
                    f"‚úÖ *–£—Å–ø–µ—Ö*\n\n–ó–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.",
                    user_id,
                    message_id,
                    reply_markup=get_back_to_main_menu_keyboard(),
                    parse_mode="Markdown"
                )
            else:
                bot.edit_message_text(
                    "‚ö†Ô∏è *–û—à–∏–±–∫–∞*\n\n–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑.",
                    user_id,
                    message_id,
                    reply_markup=get_back_to_main_menu_keyboard(),
                    parse_mode="Markdown"
                )
                
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        elif callback_data == "main_menu":
            bot.edit_message_text(
                "üì≤ *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                user_id,
                message_id,
                reply_markup=get_main_menu_keyboard(user_id),
                parse_mode="Markdown"
            )
            
        # –ï—Å–ª–∏ callback_data –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω
        else:
            bot.answer_callback_query(call.id, "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
            logger.warning(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π callback: {callback_data}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback {callback_data}: {e}")
        import traceback
        logger.error(traceback.format_exc())
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π AI
try:
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã AI, –µ—Å–ª–∏ –º–æ–¥—É–ª—å –¥–æ—Å—Ç—É–ø–µ–Ω
    register_ai_commands(bot)
    logger.info("AI –∫–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ AI –∫–æ–º–∞–Ω–¥: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
@bot.message_handler(func=lambda message: True, content_types=['text'])
def handle_text_message(message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    user_id = message.from_user.id
    text = message.text
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    from database import get_user_state
    user_state = get_user_state(user_id)
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {user_state}")
    
    if user_state == "adding_admin":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        try:
            target_user_id = int(text)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            target_user = get_user(target_user_id)
            if not target_user:
                bot.send_message(
                    user_id,
                    "‚ö†Ô∏è *–û—à–∏–±–∫–∞*\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    parse_mode="Markdown"
                )
                return
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if update_user_role(target_user_id, "admin"):
                # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                try:
                    from database import add_activity_log
                    add_activity_log(
                        user_id, 
                        "role_update", 
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", 
                        related_user_id=target_user_id
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ª–æ–≥–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
                
                bot.send_message(
                    user_id,
                    f"‚úÖ *–£—Å–ø–µ—Ö*\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user.get('first_name')} {target_user.get('last_name', '')} —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                    parse_mode="Markdown"
                )
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏
                try:
                    bot.send_message(
                        target_user_id,
                        "üëë –í–∞–º –ø—Ä–∏—Å–≤–æ–µ–Ω–∞ —Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–∏—Å—Ç–µ–º—ã.",
                        parse_mode="Markdown"
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")
            else:
                bot.send_message(
                    user_id,
                    "‚ö†Ô∏è *–û—à–∏–±–∫–∞*\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                    parse_mode="Markdown"
                )
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            from database import clear_user_state
            clear_user_state(user_id)
        except ValueError:
            bot.send_message(
                user_id,
                "‚ö†Ô∏è *–û—à–∏–±–∫–∞*\n\nID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
                parse_mode="Markdown"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
            bot.send_message(
                user_id,
                "‚ö†Ô∏è *–û—à–∏–±–∫–∞*\n\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                parse_mode="Markdown"
            )
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            from database import clear_user_state
            clear_user_state(user_id)
    
    elif user_state == "adding_dispatcher":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        try:
            target_user_id = int(text)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            target_user = get_user(target_user_id)
            if not target_user:
                bot.send_message(
                    user_id,
                    "‚ö†Ô∏è *–û—à–∏–±–∫–∞*\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    parse_mode="Markdown"
                )
                return
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
            if update_user_role(target_user_id, "dispatcher"):
                # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                try:
                    from database import add_activity_log
                    add_activity_log(
                        user_id, 
                        "role_update", 
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º", 
                        related_user_id=target_user_id
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ª–æ–≥–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
                
                bot.send_message(
                    user_id,
                    f"‚úÖ *–£—Å–ø–µ—Ö*\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user.get('first_name')} {target_user.get('last_name', '')} —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º.",
                    parse_mode="Markdown"
                )
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏
                try:
                    bot.send_message(
                        target_user_id,
                        "üìû –í–∞–º –ø—Ä–∏—Å–≤–æ–µ–Ω–∞ —Ä–æ–ª—å –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —Å–∏—Å—Ç–µ–º—ã.",
                        parse_mode="Markdown"
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")
            else:
                bot.send_message(
                    user_id,
                    "‚ö†Ô∏è *–û—à–∏–±–∫–∞*\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º.",
                    parse_mode="Markdown"
                )
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            from database import clear_user_state
            clear_user_state(user_id)
        except ValueError:
            bot.send_message(
                user_id,
                "‚ö†Ô∏è *–û—à–∏–±–∫–∞*\n\nID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
                parse_mode="Markdown"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞: {e}")
            bot.send_message(
                user_id,
                "‚ö†Ô∏è *–û—à–∏–±–∫–∞*\n\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞.",
                parse_mode="Markdown"
            )
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            from database import clear_user_state
            clear_user_state(user_id)
    
    elif user_state == "adding_technician":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞
        try:
            target_user_id = int(text)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            target_user = get_user(target_user_id)
            if not target_user:
                bot.send_message(
                    user_id,
                    "‚ö†Ô∏è *–û—à–∏–±–∫–∞*\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    parse_mode="Markdown"
                )
                return
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å –º–∞—Å—Ç–µ—Ä–∞
            if update_user_role(target_user_id, "technician"):
                # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                try:
                    from database import add_activity_log
                    add_activity_log(
                        user_id, 
                        "role_update", 
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –º–∞—Å—Ç–µ—Ä–æ–º", 
                        related_user_id=target_user_id
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ª–æ–≥–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
                
                bot.send_message(
                    user_id,
                    f"‚úÖ *–£—Å–ø–µ—Ö*\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user.get('first_name')} {target_user.get('last_name', '')} —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –º–∞—Å—Ç–µ—Ä–æ–º.",
                    parse_mode="Markdown"
                )
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏
                try:
                    bot.send_message(
                        target_user_id,
                        "üîß –í–∞–º –ø—Ä–∏—Å–≤–æ–µ–Ω–∞ —Ä–æ–ª—å –º–∞—Å—Ç–µ—Ä–∞ —Å–∏—Å—Ç–µ–º—ã.",
                        parse_mode="Markdown"
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")
            else:
                bot.send_message(
                    user_id,
                    "‚ö†Ô∏è *–û—à–∏–±–∫–∞*\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–∞—Å—Ç–µ—Ä–æ–º.",
                    parse_mode="Markdown"
                )
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            from database import clear_user_state
            clear_user_state(user_id)
        except ValueError:
            bot.send_message(
                user_id,
                "‚ö†Ô∏è *–û—à–∏–±–∫–∞*\n\nID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
                parse_mode="Markdown"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞—Å—Ç–µ—Ä–∞: {e}")
            bot.send_message(
                user_id,
                "‚ö†Ô∏è *–û—à–∏–±–∫–∞*\n\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞—Å—Ç–µ—Ä–∞.",
                parse_mode="Markdown"
            )
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            from database import clear_user_state
            clear_user_state(user_id)
    
    elif user_state == "creating_order_client_name":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ - —à–∞–≥ 1: –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
        from database import set_user_state
        set_user_state(user_id, "creating_order_client_phone", None)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
        bot.send_message(
            user_id,
            f"–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞: *{text}*\n\n"
            "2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞:",
            parse_mode="Markdown",
            reply_markup=types.ForceReply(selective=True)
        )
        
    elif user_state == "creating_order_client_phone":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ - —à–∞–≥ 2: —Ç–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        from utils import validate_phone
        if not validate_phone(text):
            bot.send_message(
                user_id,
                "‚ö†Ô∏è *–û—à–∏–±–∫–∞*\n\n–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX:",
                parse_mode="Markdown",
                reply_markup=types.ForceReply(selective=True)
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å
        from database import set_user_state
        set_user_state(user_id, "creating_order_client_address", None)
        
        bot.send_message(
            user_id,
            f"–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞: *{text}*\n\n"
            "3Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞:",
            parse_mode="Markdown",
            reply_markup=types.ForceReply(selective=True)
        )
        
    elif user_state == "creating_order_client_address":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ - —à–∞–≥ 3: –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
        from database import set_user_state
        set_user_state(user_id, "creating_order_problem", None)
        
        bot.send_message(
            user_id,
            f"–ê–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞: *{text}*\n\n"
            "4Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:",
            parse_mode="Markdown",
            reply_markup=types.ForceReply(selective=True)
        )
        
    elif user_state == "creating_order_problem":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ - —à–∞–≥ 4: –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ä–µ–º—è
        from database import set_user_state
        set_user_state(user_id, "creating_order_time", None)
        
        bot.send_message(
            user_id,
            f"–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã: *{text}*\n\n"
            "5Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú):",
            parse_mode="Markdown",
            reply_markup=types.ForceReply(selective=True)
        )
        
    elif user_state == "creating_order_time":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ - —à–∞–≥ 5: –≤—Ä–µ–º—è
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
        try:
            # TODO: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            # –í –∏–¥–µ–∞–ª–µ –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –±—ã–ª–æ –±—ã –ø–æ–ª—É—á–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î,
            # –Ω–æ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–¥–∏–º –∑–∞–∫–∞–∑
            order_info = {
                "client_name": "–ö–ª–∏–µ–Ω—Ç",
                "client_phone": "+71234567890",
                "client_address": "–ê–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞",
                "problem_description": "–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã",
                "scheduled_datetime": text
            }
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
            try:
                from database import save_order
                order_id = save_order(
                    user_id,
                    order_info["client_phone"],
                    order_info["client_name"],
                    order_info["problem_description"],
                    order_info["client_address"],
                    order_info["scheduled_datetime"]
                )
                
                if order_id:
                    # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    try:
                        from database import add_activity_log
                        add_activity_log(
                            user_id, 
                            "order_create", 
                            f"–°–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑ #{order_id}", 
                            related_order_id=order_id
                        )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ª–æ–≥–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
                    
                    bot.send_message(
                        user_id,
                        f"‚úÖ *–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω*\n\n"
                        f"*–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:* #{order_id}\n"
                        f"*–ö–ª–∏–µ–Ω—Ç:* {order_info['client_name']}\n"
                        f"*–¢–µ–ª–µ—Ñ–æ–Ω:* {order_info['client_phone']}\n"
                        f"*–ê–¥—Ä–µ—Å:* {order_info['client_address']}\n"
                        f"*–ü—Ä–æ–±–ª–µ–º–∞:* {order_info['problem_description']}\n"
                        f"*–í—Ä–µ–º—è:* {order_info['scheduled_datetime']}",
                        parse_mode="Markdown"
                    )
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
                    try:
                        from utils import send_order_notification_to_admins
                        send_order_notification_to_admins(bot, order_id)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º: {e}")
                else:
                    bot.send_message(
                        user_id,
                        "‚ö†Ô∏è *–û—à–∏–±–∫–∞*\n\n–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑.",
                        parse_mode="Markdown"
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
                bot.send_message(
                    user_id,
                    "‚ö†Ô∏è *–û—à–∏–±–∫–∞*\n\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.",
                    parse_mode="Markdown"
                )
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            from database import clear_user_state
            clear_user_state(user_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–∫–∞–∑–∞: {e}")
            bot.send_message(
                user_id,
                "‚ö†Ô∏è *–û—à–∏–±–∫–∞*\n\n–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú:",
                parse_mode="Markdown",
                reply_markup=types.ForceReply(selective=True)
            )
    
    else:
        # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {text}")
        
        # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞, —Ç–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –Ω–µ–µ –∑–¥–µ—Å—å
        if text.startswith('/'):
            return
            
        # –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.reply_to(
            message,
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
        )

try:
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã AI, –µ—Å–ª–∏ –º–æ–¥—É–ª—å –¥–æ—Å—Ç—É–ø–µ–Ω
    register_ai_commands(bot)
    logger.info("AI –∫–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ AI –∫–æ–º–∞–Ω–¥: {e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling
logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling...")
bot.polling(none_stop=True, interval=0, timeout=60)