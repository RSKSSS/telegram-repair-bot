#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ Telegram –±–æ—Ç–∞ –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
"""

import sys
import logging
from bot_diagnostics import run_bot_diagnostics
from database import check_database_connection, get_all_users, get_technicians, get_all_orders, get_problem_templates
from shared_state import TOKEN
from logger import get_component_logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = get_component_logger("bot_diagnostic_no_server")
logger.setLevel(logging.INFO)

def print_diagnostic_results(diagnostics):
    """
    –í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª—å –≤ —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    """
    print("\n" + "="*50)
    print(" "*15 + "–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê TELEGRAM –ë–û–¢–ê")
    print("="*50)
    
    # –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
    db_status = "‚úÖ –†–ê–ë–û–¢–ê–ï–¢" if diagnostics["database_connection"] else "‚ùå –û–®–ò–ë–ö–ê"
    print(f"\nüîß –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_status}")
    
    # –°—Ç–∞—Ç—É—Å —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
    token_status = "‚úÖ –í–ê–õ–ò–î–ù–´–ô" if diagnostics["bot_token_valid"] else "‚ùå –ù–ï–í–ê–õ–ò–î–ù–´–ô"
    print(f"üîë –¢–æ–∫–µ–Ω –±–æ—Ç–∞: {token_status} (–¥–ª–∏–Ω–∞: {len(TOKEN)})")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–ê–ù–ù–´–•:")
    print(f"  ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {diagnostics['users_count']}")
    print(f"  ‚Ä¢ –ú–∞—Å—Ç–µ—Ä–æ–≤: {diagnostics['technicians_count']}")
    print(f"  ‚Ä¢ –ó–∞–∫–∞–∑–æ–≤: {diagnostics['orders_count']}")
    print(f"  ‚Ä¢ –®–∞–±–ª–æ–Ω–æ–≤ –ø—Ä–æ–±–ª–µ–º: {diagnostics['templates_count']}")
    
    # –û—à–∏–±–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
    if diagnostics["errors"]:
        print(f"\n‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–´ –û–®–ò–ë–ö–ò ({len(diagnostics['errors'])}):")
        for i, error in enumerate(diagnostics["errors"], 1):
            print(f"  {i}. {error}")
    else:
        print("\n‚úÖ –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: –û—à–∏–±–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
    
    print("\n" + "="*50)
    print(" "*15 + "–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
    print("="*50 + "\n")

def run_database_tests():
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –≤—ã–≤–æ–¥–∏—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    """
    print("\n--- –¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –ë–ê–ó–ï –î–ê–ù–ù–´–• ---")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        connection_ok = check_database_connection()
        if connection_ok:
            print("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: –£–°–ü–ï–®–ù–û")
        else:
            print("‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: –û–®–ò–ë–ö–ê")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        try:
            users = get_all_users()
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: –£–°–ü–ï–®–ù–û (–Ω–∞–π–¥–µ–Ω–æ {len(users)})")
            if users:
                print(f"  ‚Ä¢ –ü–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID={users[0]['user_id']}, –∏–º—è={users[0]['first_name']}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Å—Ç–µ—Ä–æ–≤
        try:
            technicians = get_technicians()
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–æ–≤: –£–°–ü–ï–®–ù–û (–Ω–∞–π–¥–µ–Ω–æ {len(technicians)})")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Å—Ç–µ—Ä–æ–≤: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–æ–≤
        try:
            orders = get_all_orders()
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤: –£–°–ü–ï–®–ù–û (–Ω–∞–π–¥–µ–Ω–æ {len(orders)})")
            if orders:
                print(f"  ‚Ä¢ –ü–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑: ID={orders[0]['order_id']}, —Å—Ç–∞—Ç—É—Å={orders[0]['status']}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤
        try:
            templates = get_problem_templates()
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤: –£–°–ü–ï–®–ù–û (–Ω–∞–π–¥–µ–Ω–æ {len(templates)})")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤: {e}")
            
        return True
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def check_bot_token():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
    """
    print("\n--- –ü–†–û–í–ï–†–ö–ê –¢–û–ö–ï–ù–ê –ë–û–¢–ê ---")
    
    token = TOKEN
    if not token:
        print("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        return False
    
    if ":" not in token:
        print(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–≤–æ–µ—Ç–æ—á–∏–µ)")
        return False
    
    print(f"‚úÖ –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –≤–∞–ª–∏–¥–µ–Ω (–¥–ª–∏–Ω–∞: {len(token)})")
    return True

if __name__ == "__main__":
    print("\nüì± –ó–ê–ü–£–°–ö –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò TELEGRAM –ë–û–¢–ê...\n")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
    db_ok = run_database_tests()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
    token_ok = check_bot_token()
    
    # –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    diagnostics = run_bot_diagnostics()
    print_diagnostic_results(diagnostics)
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if db_ok and token_ok and not diagnostics["errors"]:
        print("‚úÖ –ë–û–¢ –ì–û–¢–û–í –ö –†–ê–ë–û–¢–ï! –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ.")
        sys.exit(0)
    else:
        print("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´! –ë–æ—Ç –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        sys.exit(1)