#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
"""

import os
import sys
import logging
import telebot
from telebot.types import Message, CallbackQuery

from database import initialize_database
from logger import get_component_logger
from shared_state import bot, TOKEN, init_bot

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = get_component_logger("bot_starter")
logger.setLevel(logging.INFO)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω—É–∂–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
from bot_fixed import (
    handle_start_command, handle_help_command, handle_new_order_command,
    handle_my_orders_command, handle_my_assigned_orders_command,
    handle_all_orders_command, handle_manage_users_command,
    handle_order_command, handle_callback_query, handle_message
)

def register_all_handlers(bot_instance):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –±–æ—Ç–∞
    """
    logger.info("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    bot_instance.register_message_handler(handle_start_command, commands=['start'])
    bot_instance.register_message_handler(handle_help_command, commands=['help'])
    bot_instance.register_message_handler(handle_new_order_command, commands=['new_order'])
    bot_instance.register_message_handler(handle_my_orders_command, commands=['my_orders'])
    bot_instance.register_message_handler(handle_my_assigned_orders_command, commands=['my_assigned_orders'])
    bot_instance.register_message_handler(handle_all_orders_command, commands=['all_orders'])
    bot_instance.register_message_handler(handle_manage_users_command, commands=['manage_users'])
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥ –≤–∏–¥–∞ /order_123
    bot_instance.register_message_handler(handle_order_command, regexp=r'^/order_\d+$')
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –±–æ—Ç–∞
    bot_instance.register_message_handler(handle_diagnostic_command, commands=['diagnostics'])
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline-–∫–Ω–æ–ø–æ–∫
    bot_instance.register_callback_query_handler(handle_callback_query, func=lambda call: True)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º)
    bot_instance.register_message_handler(handle_message, func=lambda message: True, content_types=['text'])
    
    logger.info("–í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    return bot_instance

def handle_diagnostic_command(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /diagnostics - –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –±–æ—Ç–∞
    """
    from bot_diagnostics import run_bot_diagnostics
    from utils import is_admin

    user_id = message.from_user.id if message.from_user else None
    if not user_id:
        return
    
    if is_admin(user_id):
        bot.send_message(message.chat.id, "üîÑ –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –±–æ—Ç–∞...")
        
        # –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        diagnostics = run_bot_diagnostics()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = "üìä *–û—Ç—á–µ—Ç –æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ –±–æ—Ç–∞* üìä\n\n"
        
        # –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
        db_status = "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç" if diagnostics["database_connection"] else "‚ùå –û—à–∏–±–∫–∞"
        report += f"*–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö*: {db_status}\n"
        
        # –°—Ç–∞—Ç—É—Å —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
        token_status = "‚úÖ –í–∞–ª–∏–¥–Ω—ã–π" if diagnostics["bot_token_valid"] else "‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π"
        report += f"*–¢–æ–∫–µ–Ω –±–æ—Ç–∞*: {token_status}\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        report += f"*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*: {diagnostics['users_count']}\n"
        report += f"*–ú–∞—Å—Ç–µ—Ä–æ–≤*: {diagnostics['technicians_count']}\n"
        report += f"*–ó–∞–∫–∞–∑–æ–≤*: {diagnostics['orders_count']}\n"
        report += f"*–®–∞–±–ª–æ–Ω–æ–≤ –ø—Ä–æ–±–ª–µ–º*: {diagnostics['templates_count']}\n\n"
        
        # –û—à–∏–±–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
        if diagnostics["errors"]:
            report += f"*–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ ({len(diagnostics['errors'])})* ‚ö†Ô∏è:\n"
            for i, error in enumerate(diagnostics["errors"], 1):
                report += f"{i}. {error}\n"
        else:
            report += "*–û—à–∏–±–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ* ‚úÖ"
        
        bot.send_message(
            message.chat.id,
            report,
            parse_mode="Markdown"
        )
    else:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.")

def test_message_handler(message: Message):
    """
    –¢–µ—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
    """
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")
    bot.reply_to(message, f"–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")

def start_bot():
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    """
    try:
        logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        initialize_database()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
        if not TOKEN or ':' not in TOKEN:
            logger.error(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞: {TOKEN}")
            return False
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∏–∑ shared_state
        logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º –¥–ª–∏–Ω–æ–π {len(TOKEN)}")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        register_all_handlers(bot)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        bot.register_message_handler(test_message_handler, commands=['test'])
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling...")
        bot.infinity_polling()
        
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return False

if __name__ == "__main__":
    print("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    success = start_bot()
    
    if not success:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞!")
        sys.exit(1)