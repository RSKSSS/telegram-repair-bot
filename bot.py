import os
import time
import logging
import json
import re
import telepot
from typing import Dict, Any, List, Tuple, Optional

from telepot.namedtuple import InlineKeyboardMarkup, InlineKeyboardButton

from config import TELEGRAM_BOT_TOKEN
from database import (
    initialize_database, save_user, get_user, get_user_role, 
    get_all_users, update_user_role, save_order, update_order, 
    get_order, get_orders_by_user, get_all_orders
)
from utils import (
    is_admin, get_main_menu_keyboard, get_order_status_keyboard,
    get_order_management_keyboard, get_back_to_main_menu_keyboard,
    get_user_management_keyboard, send_order_notification_to_admins,
    validate_phone, format_orders_list
)
from models import User, Order

# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
AWAITING_PHONE = 'awaiting_phone'
AWAITING_NAME = 'awaiting_name'
AWAITING_ADDRESS = 'awaiting_address'
AWAITING_PROBLEM = 'awaiting_problem'
AWAITING_USER_ID = 'awaiting_user_id'
AWAITING_COST = 'awaiting_cost'
AWAITING_DESCRIPTION = 'awaiting_description'

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}
user_data = {}

def handle_message(msg, bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    content_type, chat_type, chat_id = telepot.glance(msg)
    logger.info(f"Message from {chat_id}: {content_type}")
    
    user_info = msg.get('from', {})
    user_id = user_info.get('id')
    first_name = user_info.get('first_name', 'User')
    last_name = user_info.get('last_name')
    username = user_info.get('username')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    if user_id:
        save_user(user_id, first_name, last_name, username)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    if content_type == 'text':
        text = msg['text']
        
        if text.startswith('/start'):
            handle_start_command(bot, chat_id, user_id)
        elif text.startswith('/help'):
            handle_help_command(bot, chat_id, user_id)
        elif text.startswith('/new_order'):
            handle_new_order_command(bot, chat_id, user_id)
        elif text.startswith('/my_orders'):
            handle_my_orders_command(bot, chat_id, user_id)
        elif text.startswith('/all_orders') and is_admin(user_id):
            handle_all_orders_command(bot, chat_id, user_id)
        elif text.startswith('/manage_users') and is_admin(user_id):
            handle_manage_users_command(bot, chat_id, user_id)
        else:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            handle_user_input(bot, chat_id, user_id, text)

def handle_callback_query(msg, bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫"""
    query_id, from_id, query_data = telepot.glance(msg, flavor='callback_query')
    logger.info(f"Callback query from {from_id}: {query_data}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
    chat_id = msg['message']['chat']['id']
    message_id = msg['message']['message_id']
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ callback –¥–∞–Ω–Ω—ã–µ
    if query_data == 'new_order':
        handle_new_order_callback(bot, chat_id, from_id, message_id)
    elif query_data == 'my_orders':
        handle_my_orders_callback(bot, chat_id, from_id, message_id)
    elif query_data == 'main_menu':
        handle_main_menu_callback(bot, chat_id, from_id, message_id)
    elif query_data == 'help':
        handle_help_callback(bot, chat_id, from_id, message_id)
    elif query_data.startswith('order_'):
        order_id = int(query_data.split('_')[1])
        handle_order_detail_callback(bot, chat_id, from_id, message_id, order_id)
    elif query_data == 'manage_orders' and is_admin(from_id):
        handle_manage_orders_callback(bot, chat_id, from_id, message_id)
    elif query_data == 'manage_users' and is_admin(from_id):
        handle_manage_users_callback(bot, chat_id, from_id, message_id)
    elif query_data.startswith('change_status_') and is_admin(from_id):
        order_id = int(query_data.split('_')[2])
        handle_change_status_callback(bot, chat_id, from_id, message_id, order_id)
    elif query_data.startswith('status_') and is_admin(from_id):
        parts = query_data.split('_')
        order_id = int(parts[1])
        status = parts[2]
        handle_update_status_callback(bot, chat_id, from_id, message_id, order_id, status)
    elif query_data.startswith('add_cost_') and is_admin(from_id):
        order_id = int(query_data.split('_')[2])
        handle_add_cost_callback(bot, chat_id, from_id, message_id, order_id)
    elif query_data.startswith('add_description_') and is_admin(from_id):
        order_id = int(query_data.split('_')[2])
        handle_add_description_callback(bot, chat_id, from_id, message_id, order_id)
    elif query_data == 'add_admin' and is_admin(from_id):
        handle_add_admin_callback(bot, chat_id, from_id, message_id)
    elif query_data == 'list_users' and is_admin(from_id):
        handle_list_users_callback(bot, chat_id, from_id, message_id)
    else:
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback - –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º
        bot.answerCallbackQuery(query_id, text="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥

def handle_start_command(bot, chat_id, user_id):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user = get_user(user_id)
    first_name = user['first_name'] if user else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_states[user_id] = None
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = get_main_menu_keyboard(user_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.sendMessage(
        chat_id,
        f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {first_name}! üëã\n\n'
        f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å –∑–∞–∫–∞–∑–∞ —Ä–µ–º–æ–Ω—Ç–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤. üõ†Ô∏è\n\n'
        f'–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ —Ä–µ–º–æ–Ω—Ç, –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤ '
        f'–∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞—à–∏–º–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏.\n\n'
        f'–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:',
        reply_markup=keyboard
    )

def handle_help_command(bot, chat_id, user_id):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–ø—Ä–∞–≤–∫–∏
    help_text = "üìã <b>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:</b>\n\n"
    help_text += "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
    help_text += "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
    help_text += "/new_order - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑\n"
    help_text += "/my_orders - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ –∑–∞–∫–∞–∑—ã\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    user_role = get_user_role(user_id)
    if user_role == 'admin':
        help_text += "\nüë®‚Äçüíº <b>–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n"
        help_text += "/all_orders - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã\n"
        help_text += "/manage_users - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = get_back_to_main_menu_keyboard()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.sendMessage(
        chat_id,
        help_text,
        parse_mode='HTML',
        reply_markup=keyboard
    )

def handle_new_order_command(bot, chat_id, user_id):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /new_order"""
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    user_states[user_id] = AWAITING_PHONE
    user_data[user_id] = {}
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    bot.sendMessage(
        chat_id,
        "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:"
    )

def handle_my_orders_command(bot, chat_id, user_id):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /my_orders"""
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    orders = get_orders_by_user(user_id)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
    message, keyboard = format_orders_list(orders)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.sendMessage(
        chat_id,
        message,
        parse_mode='HTML',
        reply_markup=keyboard
    )

def handle_all_orders_command(bot, chat_id, user_id):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /all_orders (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã
    orders = get_all_orders()
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
    message, keyboard = format_orders_list(orders)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.sendMessage(
        chat_id,
        message,
        parse_mode='HTML',
        reply_markup=keyboard
    )

def handle_manage_users_command(bot, chat_id, user_id):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /manage_users (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = get_user_management_keyboard()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.sendMessage(
        chat_id,
        "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode='HTML',
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤

def handle_new_order_callback(bot, chat_id, user_id, message_id):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ new_order"""
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    user_states[user_id] = AWAITING_PHONE
    user_data[user_id] = {}
    
    # –ò–∑–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.editMessageText(
        (chat_id, message_id),
        "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:"
    )

def handle_my_orders_callback(bot, chat_id, user_id, message_id):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ my_orders"""
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    orders = get_orders_by_user(user_id)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
    message, keyboard = format_orders_list(orders)
    
    # –ò–∑–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.editMessageText(
        (chat_id, message_id),
        message,
        parse_mode='HTML',
        reply_markup=keyboard
    )

def handle_main_menu_callback(bot, chat_id, user_id, message_id):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ main_menu"""
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_states[user_id] = None
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user = get_user(user_id)
    first_name = user['first_name'] if user else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = get_main_menu_keyboard(user_id)
    
    # –ò–∑–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.editMessageText(
        (chat_id, message_id),
        f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {first_name}! üëã\n\n'
        f'–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–µ—Ä–≤–∏—Å–∞ –∑–∞–∫–∞–∑–∞ —Ä–µ–º–æ–Ω—Ç–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤. üõ†Ô∏è\n\n'
        f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=keyboard
    )

def handle_help_callback(bot, chat_id, user_id, message_id):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ help"""
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–ø—Ä–∞–≤–∫–∏
    help_text = "üìã <b>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:</b>\n\n"
    help_text += "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
    help_text += "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
    help_text += "/new_order - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑\n"
    help_text += "/my_orders - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ –∑–∞–∫–∞–∑—ã\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    user_role = get_user_role(user_id)
    if user_role == 'admin':
        help_text += "\nüë®‚Äçüíº <b>–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n"
        help_text += "/all_orders - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã\n"
        help_text += "/manage_users - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = get_back_to_main_menu_keyboard()
    
    # –ò–∑–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.editMessageText(
        (chat_id, message_id),
        help_text,
        parse_mode='HTML',
        reply_markup=keyboard
    )

def handle_order_detail_callback(bot, chat_id, user_id, message_id, order_id):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ order_{order_id}"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    order_data = get_order(order_id)
    
    if not order_data:
        # –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω
        bot.editMessageText(
            (chat_id, message_id),
            "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=get_back_to_main_menu_keyboard()
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∑–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω
    if order_data['user_id'] != user_id and not is_admin(user_id):
        # –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞
        bot.editMessageText(
            (chat_id, message_id),
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É",
            reply_markup=get_back_to_main_menu_keyboard()
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Order –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    order = Order.from_dict(order_data)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–∫–∞–∑ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    order_text = order.format_for_display()
    
    # –í—ã–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if is_admin(user_id):
        keyboard = get_order_management_keyboard(order_id)
    else:
        keyboard = get_back_to_main_menu_keyboard()
    
    # –ò–∑–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.editMessageText(
        (chat_id, message_id),
        order_text,
        parse_mode='HTML',
        reply_markup=keyboard
    )

def handle_manage_orders_callback(bot, chat_id, user_id, message_id):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ manage_orders (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã
    orders = get_all_orders()
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
    message, keyboard = format_orders_list(orders)
    
    # –ò–∑–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.editMessageText(
        (chat_id, message_id),
        message,
        parse_mode='HTML',
        reply_markup=keyboard
    )

def handle_manage_users_callback(bot, chat_id, user_id, message_id):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ manage_users (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = get_user_management_keyboard()
    
    # –ò–∑–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.editMessageText(
        (chat_id, message_id),
        "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode='HTML',
        reply_markup=keyboard
    )

def handle_change_status_callback(bot, chat_id, user_id, message_id, order_id):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ change_status_{order_id} (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    order_data = get_order(order_id)
    
    if not order_data:
        # –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω
        bot.editMessageText(
            (chat_id, message_id),
            "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=get_back_to_main_menu_keyboard()
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = get_order_status_keyboard(order_id)
    
    # –ò–∑–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.editMessageText(
        (chat_id, message_id),
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}:",
        reply_markup=keyboard
    )

def handle_update_status_callback(bot, chat_id, user_id, message_id, order_id, status):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ status_{order_id}_{status} (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    update_order(order_id, status=status)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    order_data = get_order(order_id)
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Order –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    order = Order.from_dict(order_data)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–∫–∞–∑ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    order_text = order.format_for_display()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
    order_text += f"\n‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: <b>{order.status_to_russian()}</b>"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = get_order_management_keyboard(order_id)
    
    # –ò–∑–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.editMessageText(
        (chat_id, message_id),
        order_text,
        parse_mode='HTML',
        reply_markup=keyboard
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
    try:
        client_id = order_data['user_id']
        if client_id and client_id != user_id:
            status_msg = f"üîî <b>–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ #{order_id} –∏–∑–º–µ–Ω–µ–Ω</b>\n\n"
            status_msg += f"–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: <b>{order.status_to_russian()}</b>"
            
            bot.sendMessage(
                client_id,
                status_msg,
                parse_mode='HTML'
            )
    except Exception as e:
        logger.error(f"Error sending notification to client: {e}")

def handle_add_cost_callback(bot, chat_id, user_id, message_id, order_id):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ add_cost_{order_id} (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º id –∑–∞–∫–∞–∑–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data[user_id] = {'order_id': order_id}
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    user_states[user_id] = AWAITING_COST
    
    # –ò–∑–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.editMessageText(
        (chat_id, message_id),
        f"–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id} (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):"
    )

def handle_add_description_callback(bot, chat_id, user_id, message_id, order_id):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ add_description_{order_id} (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º id –∑–∞–∫–∞–∑–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data[user_id] = {'order_id': order_id}
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
    user_states[user_id] = AWAITING_DESCRIPTION
    
    # –ò–∑–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.editMessageText(
        (chat_id, message_id),
        f"–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}:"
    )

def handle_add_admin_callback(bot, chat_id, user_id, message_id):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ add_admin (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_states[user_id] = AWAITING_USER_ID
    
    # –ò–∑–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.editMessageText(
        (chat_id, message_id),
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:"
    )

def handle_list_users_callback(bot, chat_id, user_id, message_id):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ list_users (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = get_all_users()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = "<b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
    
    for user in users:
        role_emoji = "üë®‚Äçüíº" if user['role'] == 'admin' else "üë§"
        message += f"{role_emoji} <b>ID:</b> {user['user_id']}\n"
        message += f"   <b>–ò–º—è:</b> {user['first_name']}"
        if user['last_name']:
            message += f" {user['last_name']}"
        if user['username']:
            message += f" (@{user['username']})"
        message += f"\n   <b>–†–æ–ª—å:</b> {user['role']}\n\n"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = get_user_management_keyboard()
    
    # –ò–∑–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.editMessageText(
        (chat_id, message_id),
        message,
        parse_mode='HTML',
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞

def handle_user_input(bot, chat_id, user_id, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    state = user_states.get(user_id)
    
    if state == AWAITING_PHONE:
        handle_phone_input(bot, chat_id, user_id, text)
    elif state == AWAITING_NAME:
        handle_name_input(bot, chat_id, user_id, text)
    elif state == AWAITING_ADDRESS:
        handle_address_input(bot, chat_id, user_id, text)
    elif state == AWAITING_PROBLEM:
        handle_problem_input(bot, chat_id, user_id, text)
    elif state == AWAITING_USER_ID:
        handle_user_id_input(bot, chat_id, user_id, text)
    elif state == AWAITING_COST:
        handle_cost_input(bot, chat_id, user_id, text)
    elif state == AWAITING_DESCRIPTION:
        handle_description_input(bot, chat_id, user_id, text)
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        bot.sendMessage(
            chat_id,
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é.",
            reply_markup=get_main_menu_keyboard(user_id)
        )

def handle_phone_input(bot, chat_id, user_id, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    if not validate_phone(text):
        bot.sendMessage(
            chat_id,
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 10 –¥–æ 12 —Ü–∏—Ñ—Ä)."
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
    user_data[user_id]['client_phone'] = text
    
    # –ú–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user_states[user_id] = AWAITING_NAME
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å
    bot.sendMessage(
        chat_id,
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:"
    )

def handle_name_input(bot, chat_id, user_id, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏"""
    if len(text.strip()) < 3:
        bot.sendMessage(
            chat_id,
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞)."
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è
    user_data[user_id]['client_name'] = text
    
    # –ú–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user_states[user_id] = AWAITING_ADDRESS
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å
    bot.sendMessage(
        chat_id,
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å (–≥–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞):"
    )

def handle_address_input(bot, chat_id, user_id, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞"""
    if len(text.strip()) < 5:
        bot.sendMessage(
            chat_id,
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å (–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤)."
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å
    user_data[user_id]['client_address'] = text
    
    # –ú–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user_states[user_id] = AWAITING_PROBLEM
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å
    bot.sendMessage(
        chat_id,
        "–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É —Å –≤–∞—à–∏–º –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º:"
    )

def handle_problem_input(bot, chat_id, user_id, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã"""
    if len(text.strip()) < 10:
        bot.sendMessage(
            chat_id,
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤)."
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
    user_data[user_id]['problem_description'] = text
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
    order_id = save_order(
        user_id,
        user_data[user_id]['client_phone'],
        user_data[user_id]['client_name'],
        user_data[user_id]['client_address'],
        user_data[user_id]['problem_description']
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    bot.sendMessage(
        chat_id,
        f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
        f"–ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã —Å–≤—è–∂—É—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.",
        reply_markup=get_main_menu_keyboard(user_id)
    )
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user_states[user_id] = None
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
    send_order_notification_to_admins(bot, order_id)

def handle_user_id_input(bot, chat_id, user_id, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    try:
        new_admin_id = int(text.strip())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user = get_user(new_admin_id)
        if not user:
            bot.sendMessage(
                chat_id,
                "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. "
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Å–Ω–∞—á–∞–ª–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –±–æ—Ç–æ–º.",
                reply_markup=get_user_management_keyboard()
            )
            user_states[user_id] = None
            return
        
        # –ù–∞–∑–Ω–∞—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        update_user_role(new_admin_id, 'admin')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        bot.sendMessage(
            chat_id,
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['first_name']} (ID: {new_admin_id}) "
            f"—É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            reply_markup=get_user_management_keyboard()
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        try:
            bot.sendMessage(
                new_admin_id,
                "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞–º –±—ã–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. "
                "–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.",
                reply_markup=get_main_menu_keyboard(new_admin_id)
            )
        except Exception as e:
            logger.error(f"Error sending notification to new admin: {e}")
    
    except ValueError:
        bot.sendMessage(
            chat_id,
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã).",
            reply_markup=get_user_management_keyboard()
        )
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user_states[user_id] = None

def handle_cost_input(bot, chat_id, user_id, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É—Å–ª—É–≥"""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤–≤–æ–¥ –≤ —á–∏—Å–ª–æ
        cost = float(text.strip().replace(',', '.'))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è
        if cost <= 0:
            raise ValueError("–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
        
        # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–∫–∞–∑–∞
        order_id = user_data[user_id]['order_id']
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
        update_order(order_id, service_cost=cost)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        order_data = get_order(order_id)
        order = Order.from_dict(order_data)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        bot.sendMessage(
            chat_id,
            f"‚úÖ –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {cost} —Ä—É–±.",
            reply_markup=get_order_management_keyboard(order_id)
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        try:
            client_id = order_data['user_id']
            if client_id and client_id != user_id:
                cost_msg = f"üîî <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ –∑–∞–∫–∞–∑—É #{order_id}</b>\n\n"
                cost_msg += f"–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥: <b>{cost} —Ä—É–±.</b>"
                
                bot.sendMessage(
                    client_id,
                    cost_msg,
                    parse_mode='HTML'
                )
        except Exception as e:
            logger.error(f"Error sending notification to client: {e}")
    
    except ValueError:
        bot.sendMessage(
            chat_id,
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ)."
        )
        return
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user_states[user_id] = None

def handle_description_input(bot, chat_id, user_id, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç"""
    if len(text.strip()) < 5:
        bot.sendMessage(
            chat_id,
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç (–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤)."
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–∫–∞–∑–∞
    order_id = user_data[user_id]['order_id']
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
    update_order(order_id, service_description=text)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    order_data = get_order(order_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    bot.sendMessage(
        chat_id,
        f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ.",
        reply_markup=get_order_management_keyboard(order_id)
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    try:
        client_id = order_data['user_id']
        if client_id and client_id != user_id:
            desc_msg = f"üîî <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ –∑–∞–∫–∞–∑—É #{order_id}</b>\n\n"
            desc_msg += f"–î–æ–±–∞–≤–ª–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç:\n{text}"
            
            bot.sendMessage(
                client_id,
                desc_msg,
                parse_mode='HTML'
            )
    except Exception as e:
        logger.error(f"Error sending notification to client: {e}")
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user_states[user_id] = None

def setup_handlers(bot):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤"""
    return {
        'chat': lambda msg: handle_message(msg, bot),
        'callback_query': lambda msg: handle_callback_query(msg, bot)
    }