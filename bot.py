import logging
import re
from typing import Dict, Any, Union

# Import using python-telegram-bot instead of telegram
try:
    # Try to use the python-telegram-bot package
    from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, MessageHandler
    from telegram.ext import Filters, ConversationHandler, CallbackContext
    from telegram import Update, ParseMode, InlineKeyboardButton, InlineKeyboardMarkup
except ImportError:
    # Fallback for potential import errors
    raise ImportError("Could not import from python-telegram-bot. Please install with: pip install python-telegram-bot==13.7")

import database as db
import utils
from config import TOKEN, logger, ADMIN_IDS
from models import User, Order

# Conversation states
(
    MAIN_MENU, ADD_ORDER, INPUT_PHONE, INPUT_NAME, INPUT_ADDRESS, INPUT_PROBLEM,
    MANAGE_USERS, ADD_ADMIN, LIST_USERS, WAITING_FOR_USER_ID,
    VIEW_ORDER, CHANGE_STATUS, ADD_COST, ADD_DESCRIPTION, WAITING_FOR_COST,
    WAITING_FOR_DESCRIPTION, WAITING_FOR_STATUS
) = range(17)

def start(update: Update, context: CallbackContext) -> int:
    """Start the conversation and display main menu"""
    user = update.effective_user
    user_id = user.id
    
    # Save user to database
    db.save_user(
        user_id=user_id,
        first_name=user.first_name,
        last_name=user.last_name,
        username=user.username
    )
    
    # Check if we have any admins, if not and this is the first user, make them admin
    if not ADMIN_IDS and not db.get_all_users():
        db.update_user_role(user_id, 'admin')
        logger.info(f"Set first user {user_id} as admin")
    
    keyboard = utils.get_main_menu_keyboard(user_id)
    
    update.message.reply_text(
        f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–º–æ–Ω—Ç–æ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤.',
        reply_markup=keyboard
    )
    
    return MAIN_MENU

def menu_handler(update: Update, context: CallbackContext) -> int:
    """Handle menu button callbacks"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if not query:
        return MAIN_MENU
    
    query.answer()
    data = query.data
    
    if data == 'add_order':
        query.edit_message_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX):"
        )
        return INPUT_PHONE
    
    elif data == 'my_orders':
        orders = db.get_orders_by_user(user_id)
        text, markup = utils.format_orders_list(orders)
        query.edit_message_text(text, reply_markup=markup, parse_mode=ParseMode.HTML)
        return MAIN_MENU
    
    elif data == 'all_orders' and utils.is_admin(user_id):
        orders = db.get_all_orders()
        text, markup = utils.format_orders_list(orders)
        query.edit_message_text(text, reply_markup=markup, parse_mode=ParseMode.HTML)
        return MAIN_MENU
    
    elif data == 'manage_users' and utils.is_admin(user_id):
        keyboard = utils.get_user_management_keyboard()
        query.edit_message_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:", reply_markup=keyboard)
        return MANAGE_USERS
    
    elif data == 'back_to_main':
        keyboard = utils.get_main_menu_keyboard(user_id)
        query.edit_message_text(
            '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', 
            reply_markup=keyboard
        )
        return MAIN_MENU
    
    elif data.startswith('view_order:'):
        order_id = int(data.split(':')[1])
        order = db.get_order(order_id)
        
        if not order:
            query.edit_message_text("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=utils.get_back_to_main_menu_keyboard())
            return MAIN_MENU
        
        order_obj = Order.from_dict(order)
        order_text = order_obj.format_for_display()
        
        if utils.is_admin(user_id):
            keyboard = utils.get_order_management_keyboard(order_id)
            query.edit_message_text(order_text, reply_markup=keyboard, parse_mode=ParseMode.HTML)
            return VIEW_ORDER
        else:
            query.edit_message_text(
                order_text, 
                reply_markup=utils.get_back_to_main_menu_keyboard(),
                parse_mode=ParseMode.HTML
            )
            return MAIN_MENU
    
    return MAIN_MENU

def input_phone(update: Update, context: CallbackContext) -> int:
    """Process phone number input"""
    phone = update.message.text.strip()
    
    if not utils.validate_phone(phone):
        update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX:"
        )
        return INPUT_PHONE
    
    context.user_data['phone'] = phone
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:")
    return INPUT_NAME

def input_name(update: Update, context: CallbackContext) -> int:
    """Process name input"""
    name = update.message.text.strip()
    
    if not name:
        update.message.reply_text("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:")
        return INPUT_NAME
    
    context.user_data['name'] = name
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞ (–≥–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –¥–æ–º):")
    return INPUT_ADDRESS

def input_address(update: Update, context: CallbackContext) -> int:
    """Process address input"""
    address = update.message.text.strip()
    
    if not address:
        update.message.reply_text("–ê–¥—Ä–µ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å:")
        return INPUT_ADDRESS
    
    context.user_data['address'] = address
    update.message.reply_text("–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º:")
    return INPUT_PROBLEM

def input_problem(update: Update, context: CallbackContext) -> int:
    """Process problem description input and create the order"""
    problem = update.message.text.strip()
    
    if not problem:
        update.message.reply_text("–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:")
        return INPUT_PROBLEM
    
    user_id = update.effective_user.id
    phone = context.user_data['phone']
    name = context.user_data['name']
    address = context.user_data['address']
    
    # Save the order to the database
    order_id = db.save_order(user_id, phone, name, address, problem)
    
    # Send notification to admins
    utils.send_order_notification_to_admins(context, order_id)
    
    # Show confirmation to the user
    keyboard = utils.get_main_menu_keyboard(user_id)
    update.message.reply_text(
        f"–ó–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
        f"–ö–ª–∏–µ–Ω—Ç: {name}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"–ê–¥—Ä–µ—Å: {address}\n"
        f"–ü—Ä–æ–±–ª–µ–º–∞: {problem}\n\n"
        f"–ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
        reply_markup=keyboard
    )
    
    # Clear user data
    context.user_data.clear()
    
    return MAIN_MENU

def manage_users_handler(update: Update, context: CallbackContext) -> int:
    """Handle user management options"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if not query or not utils.is_admin(user_id):
        return MAIN_MENU
    
    query.answer()
    data = query.data
    
    if data == 'list_users':
        users = db.get_all_users()
        
        if not users:
            query.edit_message_text(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                reply_markup=utils.get_user_management_keyboard()
            )
            return MANAGE_USERS
        
        text = "<b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
        
        for user in users:
            role_emoji = "üë§" if user['role'] == 'client' else "üëë"
            text += f"{role_emoji} ID: {user['user_id']} - "
            
            if user['username']:
                text += f"@{user['username']}"
            else:
                text += f"{user['first_name']}"
                
            if user['last_name']:
                text += f" {user['last_name']}"
                
            text += f" ({user['role']})\n"
        
        query.edit_message_text(
            text,
            reply_markup=utils.get_user_management_keyboard(),
            parse_mode=ParseMode.HTML
        )
        return MANAGE_USERS
    
    elif data == 'add_admin':
        query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data='manage_users')]
            ])
        )
        return WAITING_FOR_USER_ID
    
    elif data == 'manage_users':
        keyboard = utils.get_user_management_keyboard()
        query.edit_message_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:", reply_markup=keyboard)
        return MANAGE_USERS
    
    return MANAGE_USERS

def process_user_id(update: Update, context: CallbackContext) -> int:
    """Process user ID for adding an admin"""
    if not utils.is_admin(update.effective_user.id):
        return MAIN_MENU
    
    try:
        user_id = int(update.message.text.strip())
        user = db.get_user(user_id)
        
        if not user:
            keyboard = utils.get_user_management_keyboard()
            update.message.reply_text(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Ö–æ—Ç—è –±—ã —Ä–∞–∑ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.",
                reply_markup=keyboard
            )
            return MANAGE_USERS
        
        db.update_user_role(user_id, 'admin')
        
        keyboard = utils.get_user_management_keyboard()
        update.message.reply_text(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['first_name']} (ID: {user_id}) —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.",
            reply_markup=keyboard
        )
        return MANAGE_USERS
        
    except ValueError:
        keyboard = utils.get_user_management_keyboard()
        update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
            reply_markup=keyboard
        )
        return MANAGE_USERS

def order_management_handler(update: Update, context: CallbackContext) -> int:
    """Handle order management operations"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if not query or not utils.is_admin(user_id):
        return MAIN_MENU
    
    query.answer()
    data = query.data
    
    if data.startswith('change_status:'):
        order_id = int(data.split(':')[1])
        keyboard = utils.get_order_status_keyboard(order_id)
        query.edit_message_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}:",
            reply_markup=keyboard
        )
        return CHANGE_STATUS
    
    elif data.startswith('status:'):
        _, order_id, status = data.split(':')
        order_id = int(order_id)
        
        db.update_order(order_id, status=status)
        order = db.get_order(order_id)
        
        if order:
            order_obj = Order.from_dict(order)
            order_text = order_obj.format_for_display()
            
            keyboard = utils.get_order_management_keyboard(order_id)
            query.edit_message_text(
                f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω.\n\n{order_text}",
                reply_markup=keyboard,
                parse_mode=ParseMode.HTML
            )
        else:
            query.edit_message_text(
                "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=utils.get_back_to_main_menu_keyboard()
            )
        
        return VIEW_ORDER
    
    elif data.startswith('add_cost:'):
        order_id = int(data.split(':')[1])
        context.user_data['current_order_id'] = order_id
        
        query.edit_message_text(
            f"–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id} (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data=f'view_order:{order_id}')]
            ])
        )
        return WAITING_FOR_COST
    
    elif data.startswith('add_description:'):
        order_id = int(data.split(':')[1])
        context.user_data['current_order_id'] = order_id
        
        query.edit_message_text(
            f"–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data=f'view_order:{order_id}')]
            ])
        )
        return WAITING_FOR_DESCRIPTION
    
    return VIEW_ORDER

def process_cost(update: Update, context: CallbackContext) -> int:
    """Process cost input for an order"""
    if not utils.is_admin(update.effective_user.id):
        return MAIN_MENU
    
    order_id = context.user_data.get('current_order_id')
    if not order_id:
        update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=utils.get_back_to_main_menu_keyboard()
        )
        return MAIN_MENU
    
    try:
        cost = float(update.message.text.strip())
        if cost < 0:
            raise ValueError("–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π")
        
        db.update_order(order_id, service_cost=cost)
        order = db.get_order(order_id)
        
        if order:
            order_obj = Order.from_dict(order)
            order_text = order_obj.format_for_display()
            
            keyboard = utils.get_order_management_keyboard(order_id)
            update.message.reply_text(
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.\n\n{order_text}",
                reply_markup=keyboard,
                parse_mode=ParseMode.HTML
            )
        else:
            update.message.reply_text(
                "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=utils.get_back_to_main_menu_keyboard()
            )
        
        return VIEW_ORDER
        
    except ValueError:
        update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data=f'view_order:{order_id}')]
            ])
        )
        return WAITING_FOR_COST

def process_description(update: Update, context: CallbackContext) -> int:
    """Process service description input for an order"""
    if not utils.is_admin(update.effective_user.id):
        return MAIN_MENU
    
    order_id = context.user_data.get('current_order_id')
    if not order_id:
        update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=utils.get_back_to_main_menu_keyboard()
        )
        return MAIN_MENU
    
    description = update.message.text.strip()
    if not description:
        update.message.reply_text(
            "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data=f'view_order:{order_id}')]
            ])
        )
        return WAITING_FOR_DESCRIPTION
    
    db.update_order(order_id, service_description=description)
    order = db.get_order(order_id)
    
    if order:
        order_obj = Order.from_dict(order)
        order_text = order_obj.format_for_display()
        
        keyboard = utils.get_order_management_keyboard(order_id)
        update.message.reply_text(
            f"–û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ.\n\n{order_text}",
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML
        )
    else:
        update.message.reply_text(
            "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=utils.get_back_to_main_menu_keyboard()
        )
    
    return VIEW_ORDER

def error_handler(update: Update, context: CallbackContext) -> None:
    """Log errors caused by updates"""
    logger.error(f"Update {update} caused error {context.error}")
    
    if update.effective_message:
        error_message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        update.effective_message.reply_text(error_message)

def setup_bot():
    """Setup the bot with all handlers"""
    # Initialize the database
    db.initialize_database()
    
    # Create the Updater
    updater = Updater(TOKEN)
    dispatcher = updater.dispatcher
    
    # Create conversation handler
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            MAIN_MENU: [
                CallbackQueryHandler(menu_handler)
            ],
            INPUT_PHONE: [
                MessageHandler(Filters.text & ~Filters.command, input_phone)
            ],
            INPUT_NAME: [
                MessageHandler(Filters.text & ~Filters.command, input_name)
            ],
            INPUT_ADDRESS: [
                MessageHandler(Filters.text & ~Filters.command, input_address)
            ],
            INPUT_PROBLEM: [
                MessageHandler(Filters.text & ~Filters.command, input_problem)
            ],
            MANAGE_USERS: [
                CallbackQueryHandler(manage_users_handler)
            ],
            WAITING_FOR_USER_ID: [
                MessageHandler(Filters.text & ~Filters.command, process_user_id),
                CallbackQueryHandler(manage_users_handler)
            ],
            VIEW_ORDER: [
                CallbackQueryHandler(order_management_handler)
            ],
            CHANGE_STATUS: [
                CallbackQueryHandler(order_management_handler)
            ],
            WAITING_FOR_COST: [
                MessageHandler(Filters.text & ~Filters.command, process_cost),
                CallbackQueryHandler(order_management_handler)
            ],
            WAITING_FOR_DESCRIPTION: [
                MessageHandler(Filters.text & ~Filters.command, process_description),
                CallbackQueryHandler(order_management_handler)
            ],
        },
        fallbacks=[
            CommandHandler('start', start),
        ],
        allow_reentry=True,
        per_message=False
    )
    
    # Add handlers
    dispatcher.add_handler(conv_handler)
    
    # Add error handler
    dispatcher.add_error_handler(error_handler)
    
    return updater
