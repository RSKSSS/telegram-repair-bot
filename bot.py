#!/usr/bin/env python3
import logging
import os
from typing import Dict, List, Optional
import telebot
from telebot.types import Message, CallbackQuery
from telebot import TeleBot

from database import (
    save_user, get_user, get_user_role, get_all_users, get_technicians,
    update_user_role, get_all_orders, get_orders_by_user, get_assigned_orders,
    save_order, update_order, get_order, assign_order, get_order_technicians,
    approve_user, reject_user, is_user_approved, get_unapproved_users
)
from models import User, Order, Assignment
from utils import (
    is_admin, is_dispatcher, is_technician, get_role_name, get_status_name,
    get_main_menu_keyboard, get_order_status_keyboard, get_order_management_keyboard,
    get_technician_order_keyboard, get_back_to_main_menu_keyboard,
    get_user_management_keyboard, get_technician_list_keyboard,
    send_order_notification_to_admins, validate_phone, format_orders_list,
    get_approval_requests_keyboard
)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
if not TOKEN:
    raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
bot = TeleBot(TOKEN)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_states = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ ID –∑–∞–∫–∞–∑–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
user_order_ids = {}


def set_user_state(user_id: int, state: str, order_id: Optional[int] = None) -> None:
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_states[user_id] = state
    if order_id is not None:
        user_order_ids[user_id] = order_id


def clear_user_state(user_id: int) -> None:
    """
    –û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_id in user_states:
        del user_states[user_id]
    if user_id in user_order_ids:
        del user_order_ids[user_id]


def get_user_state(user_id: int) -> Optional[str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    return user_states.get(user_id)


def get_current_order_id(user_id: int) -> Optional[int]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    return user_order_ids.get(user_id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start'])
def handle_start_command(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    """
    user_id = message.from_user.id
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    username = message.from_user.username
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    save_user(user_id, first_name, last_name, username)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if not is_user_approved(user_id):
        bot.send_message(
            user_id,
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Å–µ—Ä–≤–∏—Å–∞ —Ä–µ–º–æ–Ω—Ç–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤!\n\n"
            "–í–∞—à–∞ —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. "
            "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –≤–∞—à–∞ —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.",
            parse_mode='Markdown'
        )
        return
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.send_message(
        user_id,
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Å–µ—Ä–≤–∏—Å–∞ —Ä–µ–º–æ–Ω—Ç–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=get_main_menu_keyboard(user_id),
        parse_mode='Markdown'
    )


@bot.message_handler(commands=['help'])
def handle_help_command(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
    """
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if not is_user_approved(user_id):
        bot.send_message(
            user_id,
            "‚ö†Ô∏è –í–∞—à–∞ —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            parse_mode='Markdown'
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Å–ø—Ä–∞–≤–∫–∏
    role = get_user_role(user_id)
    
    # –ë–∞–∑–æ–≤–∞—è —Å–ø—Ä–∞–≤–∫–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    help_text = (
        "üîç *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*\n\n"
        "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –¥–ª—è —Ä–æ–ª–∏ —Å–ø—Ä–∞–≤–∫—É
    if role == 'admin':
        help_text += (
            "*–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n"
            "/all_orders - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤\n"
            "/manage_users - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n"
            "/order_<id> - –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –ø–æ –µ–≥–æ ID\n\n"
            "–ö–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, "
            "—É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–∫–∞–∑–∞–º–∏ –∏ –Ω–∞–∑–Ω–∞—á–∞—Ç—å —Ç–µ—Ö–Ω–∏–∫–æ–≤ –Ω–∞ –∑–∞–∫–∞–∑—ã."
        )
    elif role == 'dispatcher':
        help_text += (
            "*–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞:*\n"
            "/new_order - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑\n"
            "/my_orders - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤\n"
            "/order_<id> - –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –ø–æ –µ–≥–æ ID\n\n"
            "–ö–∞–∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä, –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ."
        )
    elif role == 'technician':
        help_text += (
            "*–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ—Ö–Ω–∏–∫–∞:*\n"
            "/my_assigned_orders - –ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –≤–∞–º –∑–∞–∫–∞–∑–æ–≤\n"
            "/order_<id> - –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –ø–æ –µ–≥–æ ID\n\n"
            "–ö–∞–∫ —Ç–µ—Ö–Ω–∏–∫, –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –≤–∞–º –∑–∞–∫–∞–∑—ã, "
            "–æ–±–Ω–æ–≤–ª—è—Ç—å –∏—Ö —Å—Ç–∞—Ç—É—Å –∏ –¥–æ–±–∞–≤–ª—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞—Ö."
        )
    
    bot.send_message(
        user_id,
        help_text,
        reply_markup=get_back_to_main_menu_keyboard(),
        parse_mode='Markdown'
    )


@bot.message_handler(commands=['new_order'])
def handle_new_order_command(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /new_order (—Ç–æ–ª—å–∫–æ –¥–ª—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤)
    """
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if not is_user_approved(user_id):
        bot.send_message(
            user_id,
            "‚ö†Ô∏è –í–∞—à–∞ —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            parse_mode='Markdown'
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º
    if not is_dispatcher(user_id):
        bot.send_message(
            user_id,
            "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤. –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞–º.",
            reply_markup=get_back_to_main_menu_keyboard(),
            parse_mode='Markdown'
        )
        return
    
    # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
    bot.send_message(
        user_id,
        "üìù *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞:",
        reply_markup=telebot.types.ReplyKeyboardRemove(),
        parse_mode='Markdown'
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    set_user_state(user_id, "waiting_for_phone")


@bot.message_handler(commands=['my_orders'])
def handle_my_orders_command(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /my_orders (–¥–ª—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤)
    """
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if not is_user_approved(user_id):
        bot.send_message(
            user_id,
            "‚ö†Ô∏è –í–∞—à–∞ —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            parse_mode='Markdown'
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º
    if not is_dispatcher(user_id):
        bot.send_message(
            user_id,
            "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–æ–≤. –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞–º.",
            reply_markup=get_back_to_main_menu_keyboard(),
            parse_mode='Markdown'
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    orders = get_orders_by_user(user_id)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
    message_text, keyboard = format_orders_list(orders)
    
    bot.send_message(
        user_id,
        message_text,
        reply_markup=keyboard,
        parse_mode='Markdown'
    )


@bot.message_handler(commands=['my_assigned_orders'])
def handle_my_assigned_orders_command(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /my_assigned_orders (–¥–ª—è —Ç–µ—Ö–Ω–∏–∫–æ–≤)
    """
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if not is_user_approved(user_id):
        bot.send_message(
            user_id,
            "‚ö†Ô∏è –í–∞—à–∞ —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            parse_mode='Markdown'
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ—Ö–Ω–∏–∫–æ–º
    if not is_technician(user_id):
        bot.send_message(
            user_id,
            "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤. "
            "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ç–µ—Ö–Ω–∏–∫–∞–º.",
            reply_markup=get_back_to_main_menu_keyboard(),
            parse_mode='Markdown'
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫—É –∑–∞–∫–∞–∑—ã
    orders = get_assigned_orders(user_id)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
    message_text, keyboard = format_orders_list(orders)
    
    bot.send_message(
        user_id,
        message_text,
        reply_markup=keyboard,
        parse_mode='Markdown'
    )


@bot.message_handler(commands=['all_orders'])
def handle_all_orders_command(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /all_orders (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
    """
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if not is_user_approved(user_id):
        bot.send_message(
            user_id,
            "‚ö†Ô∏è –í–∞—à–∞ —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            parse_mode='Markdown'
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not is_admin(user_id):
        bot.send_message(
            user_id,
            "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤. "
            "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.",
            reply_markup=get_back_to_main_menu_keyboard(),
            parse_mode='Markdown'
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã
    orders = get_all_orders()
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
    message_text, keyboard = format_orders_list(orders)
    
    bot.send_message(
        user_id,
        message_text,
        reply_markup=keyboard,
        parse_mode='Markdown'
    )


@bot.message_handler(commands=['manage_users'])
def handle_manage_users_command(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /manage_users (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
    """
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if not is_user_approved(user_id):
        bot.send_message(
            user_id,
            "‚ö†Ô∏è –í–∞—à–∞ —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            parse_mode='Markdown'
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not is_admin(user_id):
        bot.send_message(
            user_id,
            "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏. "
            "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.",
            reply_markup=get_back_to_main_menu_keyboard(),
            parse_mode='Markdown'
        )
        return
    
    bot.send_message(
        user_id,
        "üë• *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_user_management_keyboard(),
        parse_mode='Markdown'
    )


@bot.message_handler(regexp=r'^/order_(\d+)$')
def handle_order_command(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /order_<id> –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∑–∞–∫–∞–∑—É
    """
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if not is_user_approved(user_id):
        bot.send_message(
            user_id,
            "‚ö†Ô∏è –í–∞—à–∞ —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            parse_mode='Markdown'
        )
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–∫–∞–∑–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    order_id = int(message.text.split('_')[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
    order = get_order(order_id)
    
    if not order:
        bot.send_message(
            user_id,
            f"‚ö†Ô∏è –ó–∞–∫–∞–∑ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_back_to_main_menu_keyboard(),
            parse_mode='Markdown'
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–∫–∞–∑—É
    has_access = False
    
    if is_admin(user_id):
        # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –∑–∞–∫–∞–∑–∞–º
        has_access = True
        keyboard = get_order_management_keyboard(order_id)
    elif is_dispatcher(user_id) and order['dispatcher_id'] == user_id:
        # –î–∏—Å–ø–µ—Ç—á–µ—Ä—ã –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∫ —Å–≤–æ–∏–º –∑–∞–∫–∞–∑–∞–º
        has_access = True
        keyboard = get_order_management_keyboard(order_id)
    elif is_technician(user_id):
        # –¢–µ—Ö–Ω–∏–∫–∏ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º –∏–º –∑–∞–∫–∞–∑–∞–º
        technicians = get_order_technicians(order_id)
        if any(tech['technician_id'] == user_id for tech in technicians):
            has_access = True
            keyboard = get_technician_order_keyboard(order_id)
    
    if not has_access:
        bot.send_message(
            user_id,
            f"‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–∫–∞–∑—É #{order_id}.",
            reply_markup=get_back_to_main_menu_keyboard(),
            parse_mode='Markdown'
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∑–∞–∫–∞–∑–∞
    order_obj = Order.from_dict(order)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
    bot.send_message(
        user_id,
        order_obj.format_for_display(),
        reply_markup=keyboard,
        parse_mode='Markdown'
    )


@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline-–∫–Ω–æ–ø–æ–∫
    """
    user_id = call.from_user.id
    message_id = call.message.message_id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if not is_user_approved(user_id) and call.data != "main_menu":
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –í–∞—à–∞ —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    if call.data == "main_menu":
        handle_main_menu_callback(user_id, message_id)
    elif call.data == "help":
        handle_help_callback(user_id, message_id)
    elif call.data == "new_order":
        handle_new_order_callback(user_id, message_id)
    elif call.data == "my_orders":
        handle_my_orders_callback(user_id, message_id)
    elif call.data == "my_assigned_orders":
        handle_my_assigned_orders_callback(user_id, message_id)
    elif call.data == "all_orders":
        handle_all_orders_callback(user_id, message_id)
    elif call.data == "manage_users":
        handle_manage_users_callback(user_id, message_id)
    elif call.data == "list_users":
        handle_list_users_callback(user_id, message_id)
    elif call.data == "approval_requests":
        handle_approval_requests_callback(user_id, message_id)
    elif call.data.startswith("approve_"):
        user_to_approve = int(call.data.split("_")[1])
        handle_approve_user_callback(user_id, message_id, user_to_approve)
    elif call.data.startswith("reject_"):
        user_to_reject = int(call.data.split("_")[1])
        handle_reject_user_callback(user_id, message_id, user_to_reject)
    elif call.data == "add_admin":
        handle_add_admin_callback(user_id, message_id)
    elif call.data == "add_dispatcher":
        handle_add_dispatcher_callback(user_id, message_id)
    elif call.data == "add_technician":
        handle_add_technician_callback(user_id, message_id)
    elif call.data.startswith("order_"):
        order_id = int(call.data.split("_")[1])
        handle_order_detail_callback(user_id, message_id, order_id)
    elif call.data.startswith("change_status_"):
        order_id = int(call.data.split("_")[2])
        handle_change_status_callback(user_id, message_id, order_id)
    elif call.data.startswith("status_"):
        parts = call.data.split("_")
        order_id = int(parts[1])
        status = parts[2]
        handle_update_status_callback(user_id, message_id, order_id, status)
    elif call.data.startswith("assign_technician_"):
        order_id = int(call.data.split("_")[2])
        handle_assign_technician_callback(user_id, message_id, order_id)
    elif call.data.startswith("assign_"):
        parts = call.data.split("_")
        order_id = int(parts[1])
        technician_id = int(parts[2])
        handle_assign_order_callback(user_id, message_id, order_id, technician_id)
    elif call.data.startswith("add_cost_"):
        order_id = int(call.data.split("_")[2])
        handle_add_cost_callback(user_id, message_id, order_id)
    elif call.data.startswith("add_description_"):
        order_id = int(call.data.split("_")[2])
        handle_add_description_callback(user_id, message_id, order_id)
    
    # –û—Ç–º–µ—á–∞–µ–º callback-–∑–∞–ø—Ä–æ—Å –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
    bot.answer_callback_query(call.id)


def handle_main_menu_callback(user_id, message_id):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ main_menu
    """
    bot.edit_message_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Å–µ—Ä–≤–∏—Å–∞ —Ä–µ–º–æ–Ω—Ç–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:",
        user_id,
        message_id,
        reply_markup=get_main_menu_keyboard(user_id),
        parse_mode='Markdown'
    )
    clear_user_state(user_id)


def handle_help_callback(user_id, message_id):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ help
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Å–ø—Ä–∞–≤–∫–∏
    role = get_user_role(user_id)
    
    # –ë–∞–∑–æ–≤–∞—è —Å–ø—Ä–∞–≤–∫–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    help_text = (
        "üîç *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*\n\n"
        "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –¥–ª—è —Ä–æ–ª–∏ —Å–ø—Ä–∞–≤–∫—É
    if role == 'admin':
        help_text += (
            "*–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n"
            "/all_orders - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤\n"
            "/manage_users - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n"
            "/order_<id> - –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –ø–æ –µ–≥–æ ID\n\n"
            "–ö–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, "
            "—É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–∫–∞–∑–∞–º–∏ –∏ –Ω–∞–∑–Ω–∞—á–∞—Ç—å —Ç–µ—Ö–Ω–∏–∫–æ–≤ –Ω–∞ –∑–∞–∫–∞–∑—ã."
        )
    elif role == 'dispatcher':
        help_text += (
            "*–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞:*\n"
            "/new_order - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑\n"
            "/my_orders - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤\n"
            "/order_<id> - –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –ø–æ –µ–≥–æ ID\n\n"
            "–ö–∞–∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä, –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ."
        )
    elif role == 'technician':
        help_text += (
            "*–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ—Ö–Ω–∏–∫–∞:*\n"
            "/my_assigned_orders - –ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –≤–∞–º –∑–∞–∫–∞–∑–æ–≤\n"
            "/order_<id> - –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –ø–æ –µ–≥–æ ID\n\n"
            "–ö–∞–∫ —Ç–µ—Ö–Ω–∏–∫, –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –≤–∞–º –∑–∞–∫–∞–∑—ã, "
            "–æ–±–Ω–æ–≤–ª—è—Ç—å –∏—Ö —Å—Ç–∞—Ç—É—Å –∏ –¥–æ–±–∞–≤–ª—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞—Ö."
        )
    
    bot.edit_message_text(
        help_text,
        user_id,
        message_id,
        reply_markup=get_back_to_main_menu_keyboard(),
        parse_mode='Markdown'
    )


def handle_new_order_callback(user_id, message_id):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ new_order
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º
    if not is_dispatcher(user_id):
        bot.edit_message_text(
            "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤. –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞–º.",
            user_id,
            message_id,
            reply_markup=get_back_to_main_menu_keyboard(),
            parse_mode='Markdown'
        )
        return
    
    bot.edit_message_text(
        "üìù *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞:",
        user_id,
        message_id,
        parse_mode='Markdown'
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    set_user_state(user_id, "waiting_for_phone")


def handle_my_orders_callback(user_id, message_id):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ my_orders
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º
    if not is_dispatcher(user_id):
        bot.edit_message_text(
            "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–æ–≤. –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞–º.",
            user_id,
            message_id,
            reply_markup=get_back_to_main_menu_keyboard(),
            parse_mode='Markdown'
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    orders = get_orders_by_user(user_id)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
    message_text, keyboard = format_orders_list(orders)
    
    bot.edit_message_text(
        message_text,
        user_id,
        message_id,
        reply_markup=keyboard,
        parse_mode='Markdown'
    )


def handle_my_assigned_orders_callback(user_id, message_id):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ my_assigned_orders
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ—Ö–Ω–∏–∫–æ–º
    if not is_technician(user_id):
        bot.edit_message_text(
            "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤. "
            "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ç–µ—Ö–Ω–∏–∫–∞–º.",
            user_id,
            message_id,
            reply_markup=get_back_to_main_menu_keyboard(),
            parse_mode='Markdown'
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫—É –∑–∞–∫–∞–∑—ã
    orders = get_assigned_orders(user_id)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
    message_text, keyboard = format_orders_list(orders)
    
    bot.edit_message_text(
        message_text,
        user_id,
        message_id,
        reply_markup=keyboard,
        parse_mode='Markdown'
    )


def handle_all_orders_callback(user_id, message_id):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ all_orders
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not is_admin(user_id):
        bot.edit_message_text(
            "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤. "
            "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.",
            user_id,
            message_id,
            reply_markup=get_back_to_main_menu_keyboard(),
            parse_mode='Markdown'
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã
    orders = get_all_orders()
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
    message_text, keyboard = format_orders_list(orders)
    
    bot.edit_message_text(
        message_text,
        user_id,
        message_id,
        reply_markup=keyboard,
        parse_mode='Markdown'
    )


def handle_manage_users_callback(user_id, message_id):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ manage_users
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not is_admin(user_id):
        bot.edit_message_text(
            "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏. "
            "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.",
            user_id,
            message_id,
            reply_markup=get_back_to_main_menu_keyboard(),
            parse_mode='Markdown'
        )
        return
    
    bot.edit_message_text(
        "üë• *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        user_id,
        message_id,
        reply_markup=get_user_management_keyboard(),
        parse_mode='Markdown'
    )


def handle_list_users_callback(user_id, message_id):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ list_users
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not is_admin(user_id):
        bot.edit_message_text(
            "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. "
            "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.",
            user_id,
            message_id,
            reply_markup=get_back_to_main_menu_keyboard(),
            parse_mode='Markdown'
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = get_all_users()
    
    if not users:
        bot.edit_message_text(
            "üë• *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç*",
            user_id,
            message_id,
            reply_markup=get_back_to_main_menu_keyboard(),
            parse_mode='Markdown'
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_text = "üë• *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*\n\n"
    
    for i, user in enumerate(users):
        name = user['first_name']
        if user['last_name']:
            name += f" {user['last_name']}"
        
        username = f"@{user['username']}" if user['username'] else "–±–µ–∑ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        role = get_role_name(user['role'])
        approved = "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω" if user['is_approved'] else "‚ùå –ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
        
        message_text += (
            f"{i+1}. *{name}* ({username})\n"
            f"   –†–æ–ª—å: {role}\n"
            f"   –°—Ç–∞—Ç—É—Å: {approved}\n"
            f"   ID: `{user['user_id']}`\n\n"
        )
    
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —Ä–∞–∑–±–∏–≤–∞–µ–º –µ–≥–æ –Ω–∞ —á–∞—Å—Ç–∏
    max_length = 4096  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
    
    if len(message_text) <= max_length:
        bot.edit_message_text(
            message_text,
            user_id,
            message_id,
            reply_markup=get_back_to_main_menu_keyboard(),
            parse_mode='Markdown'
        )
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å, –∑–∞–º–µ–Ω—è—è —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.edit_message_text(
            message_text[:max_length],
            user_id,
            message_id,
            parse_mode='Markdown'
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ –∫–∞–∫ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        remaining_text = message_text[max_length:]
        
        while remaining_text:
            part = remaining_text[:max_length]
            remaining_text = remaining_text[max_length:]
            
            # –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞
            if not remaining_text:
                bot.send_message(
                    user_id,
                    part,
                    reply_markup=get_back_to_main_menu_keyboard(),
                    parse_mode='Markdown'
                )
            else:
                bot.send_message(
                    user_id,
                    part,
                    parse_mode='Markdown'
                )


def handle_approval_requests_callback(user_id, message_id):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ approval_requests
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not is_admin(user_id):
        bot.edit_message_text(
            "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞–º–∏ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ. "
            "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.",
            user_id,
            message_id,
            reply_markup=get_back_to_main_menu_keyboard(),
            parse_mode='Markdown'
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    message_text, keyboard = get_approval_requests_keyboard()
    
    bot.edit_message_text(
        message_text,
        user_id,
        message_id,
        reply_markup=keyboard,
        parse_mode='Markdown'
    )


def handle_approve_user_callback(user_id, message_id, user_to_approve):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not is_admin(user_id):
        bot.edit_message_text(
            "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. "
            "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.",
            user_id,
            message_id,
            reply_markup=get_back_to_main_menu_keyboard(),
            parse_mode='Markdown'
        )
        return
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if approve_user(user_to_approve):
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = get_user(user_to_approve)
        if user_info:
            name = user_info['first_name']
            if user_info['last_name']:
                name += f" {user_info['last_name']}"
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
            bot.edit_message_text(
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å *{name}* —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.",
                user_id,
                message_id,
                reply_markup=get_back_to_main_menu_keyboard(),
                parse_mode='Markdown'
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
            try:
                bot.send_message(
                    user_to_approve,
                    "‚úÖ –í–∞—à–∞ —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. "
                    "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.",
                    reply_markup=get_main_menu_keyboard(user_to_approve),
                    parse_mode='Markdown'
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_to_approve}: {e}")
        else:
            bot.edit_message_text(
                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.",
                user_id,
                message_id,
                reply_markup=get_back_to_main_menu_keyboard(),
                parse_mode='Markdown'
            )
    else:
        bot.edit_message_text(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            user_id,
            message_id,
            reply_markup=get_back_to_main_menu_keyboard(),
            parse_mode='Markdown'
        )


def handle_reject_user_callback(user_id, message_id, user_to_reject):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not is_admin(user_id):
        bot.edit_message_text(
            "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. "
            "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.",
            user_id,
            message_id,
            reply_markup=get_back_to_main_menu_keyboard(),
            parse_mode='Markdown'
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–µ—Ä–µ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ–º
    user_info = get_user(user_to_reject)
    if user_info:
        name = user_info['first_name']
        if user_info['last_name']:
            name += f" {user_info['last_name']}"
        
        # –û—Ç–∫–ª–æ–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if reject_user(user_to_reject):
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ —É—Å–ø–µ—à–Ω–æ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
            bot.edit_message_text(
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å *{name}* –æ—Ç–∫–ª–æ–Ω–µ–Ω.",
                user_id,
                message_id,
                reply_markup=get_back_to_main_menu_keyboard(),
                parse_mode='Markdown'
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
            try:
                bot.send_message(
                    user_to_reject,
                    "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                    parse_mode='Markdown'
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_to_reject}: {e}")
        else:
            bot.edit_message_text(
                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                user_id,
                message_id,
                reply_markup=get_back_to_main_menu_keyboard(),
                parse_mode='Markdown'
            )
    else:
        bot.edit_message_text(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.",
            user_id,
            message_id,
            reply_markup=get_back_to_main_menu_keyboard(),
            parse_mode='Markdown'
        )


def handle_add_admin_callback(user_id, message_id):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ add_admin
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not is_admin(user_id):
        bot.edit_message_text(
            "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤. "
            "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.",
            user_id,
            message_id,
            reply_markup=get_back_to_main_menu_keyboard(),
            parse_mode='Markdown'
        )
        return
    
    bot.edit_message_text(
        "üëë *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:\n"
        "(ID –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç –±–æ—Ç—É –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, "
        "–∏ –≤—ã –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ)",
        user_id,
        message_id,
        parse_mode='Markdown'
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    set_user_state(user_id, "waiting_for_admin_id")


def handle_add_dispatcher_callback(user_id, message_id):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ add_dispatcher
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not is_admin(user_id):
        bot.edit_message_text(
            "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤. "
            "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.",
            user_id,
            message_id,
            reply_markup=get_back_to_main_menu_keyboard(),
            parse_mode='Markdown'
        )
        return
    
    bot.edit_message_text(
        "üìû *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º:\n"
        "(ID –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç –±–æ—Ç—É –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, "
        "–∏ –≤—ã –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ)",
        user_id,
        message_id,
        parse_mode='Markdown'
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    set_user_state(user_id, "waiting_for_dispatcher_id")


def handle_add_technician_callback(user_id, message_id):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ add_technician
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not is_admin(user_id):
        bot.edit_message_text(
            "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏–∫–æ–≤. "
            "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.",
            user_id,
            message_id,
            reply_markup=get_back_to_main_menu_keyboard(),
            parse_mode='Markdown'
        )
        return
    
    bot.edit_message_text(
        "üîß *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ—Ö–Ω–∏–∫–∞*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Ç–µ—Ö–Ω–∏–∫–æ–º:\n"
        "(ID –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç –±–æ—Ç—É –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, "
        "–∏ –≤—ã –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ)",
        user_id,
        message_id,
        parse_mode='Markdown'
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    set_user_state(user_id, "waiting_for_technician_id")


def handle_order_detail_callback(user_id, message_id, order_id):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ order_{order_id}
    """
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
    order = get_order(order_id)
    
    if not order:
        bot.edit_message_text(
            f"‚ö†Ô∏è –ó–∞–∫–∞–∑ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            user_id,
            message_id,
            reply_markup=get_back_to_main_menu_keyboard(),
            parse_mode='Markdown'
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–∫–∞–∑—É
    has_access = False
    
    if is_admin(user_id):
        # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –∑–∞–∫–∞–∑–∞–º
        has_access = True
        keyboard = get_order_management_keyboard(order_id)
    elif is_dispatcher(user_id) and order['dispatcher_id'] == user_id:
        # –î–∏—Å–ø–µ—Ç—á–µ—Ä—ã –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∫ —Å–≤–æ–∏–º –∑–∞–∫–∞–∑–∞–º
        has_access = True
        keyboard = get_order_management_keyboard(order_id)
    elif is_technician(user_id):
        # –¢–µ—Ö–Ω–∏–∫–∏ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º –∏–º –∑–∞–∫–∞–∑–∞–º
        technicians = get_order_technicians(order_id)
        if any(tech['technician_id'] == user_id for tech in technicians):
            has_access = True
            keyboard = get_technician_order_keyboard(order_id)
    
    if not has_access:
        bot.edit_message_text(
            f"‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–∫–∞–∑—É #{order_id}.",
            user_id,
            message_id,
            reply_markup=get_back_to_main_menu_keyboard(),
            parse_mode='Markdown'
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∑–∞–∫–∞–∑–∞
    order_obj = Order.from_dict(order)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
    bot.edit_message_text(
        order_obj.format_for_display(),
        user_id,
        message_id,
        reply_markup=keyboard,
        parse_mode='Markdown'
    )


def handle_change_status_callback(user_id, message_id, order_id):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ change_status_{order_id}
    """
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
    order = get_order(order_id)
    
    if not order:
        bot.edit_message_text(
            f"‚ö†Ô∏è –ó–∞–∫–∞–∑ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            user_id,
            message_id,
            reply_markup=get_back_to_main_menu_keyboard(),
            parse_mode='Markdown'
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–∫–∞–∑—É
    has_access = False
    
    if is_admin(user_id):
        # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –∑–∞–∫–∞–∑–∞–º
        has_access = True
    elif is_dispatcher(user_id) and order['dispatcher_id'] == user_id:
        # –î–∏—Å–ø–µ—Ç—á–µ—Ä—ã –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∫ —Å–≤–æ–∏–º –∑–∞–∫–∞–∑–∞–º
        has_access = True
    elif is_technician(user_id):
        # –¢–µ—Ö–Ω–∏–∫–∏ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º –∏–º –∑–∞–∫–∞–∑–∞–º
        technicians = get_order_technicians(order_id)
        if any(tech['technician_id'] == user_id for tech in technicians):
            has_access = True
    
    if not has_access:
        bot.edit_message_text(
            f"‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–∫–∞–∑—É #{order_id}.",
            user_id,
            message_id,
            reply_markup=get_back_to_main_menu_keyboard(),
            parse_mode='Markdown'
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    bot.edit_message_text(
        f"üîÑ *–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ #{order_id}*\n\n"
        f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {get_status_name(order['status'])}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:",
        user_id,
        message_id,
        reply_markup=get_order_status_keyboard(order_id),
        parse_mode='Markdown'
    )


def handle_update_status_callback(user_id, message_id, order_id, status):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ status_{order_id}_{status}
    """
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
    order = get_order(order_id)
    
    if not order:
        bot.edit_message_text(
            f"‚ö†Ô∏è –ó–∞–∫–∞–∑ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            user_id,
            message_id,
            reply_markup=get_back_to_main_menu_keyboard(),
            parse_mode='Markdown'
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–∫–∞–∑—É
    has_access = False
    
    if is_admin(user_id):
        # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –∑–∞–∫–∞–∑–∞–º
        has_access = True
        keyboard = get_order_management_keyboard(order_id)
    elif is_dispatcher(user_id) and order['dispatcher_id'] == user_id:
        # –î–∏—Å–ø–µ—Ç—á–µ—Ä—ã –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∫ —Å–≤–æ–∏–º –∑–∞–∫–∞–∑–∞–º
        has_access = True
        keyboard = get_order_management_keyboard(order_id)
    elif is_technician(user_id):
        # –¢–µ—Ö–Ω–∏–∫–∏ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º –∏–º –∑–∞–∫–∞–∑–∞–º
        technicians = get_order_technicians(order_id)
        if any(tech['technician_id'] == user_id for tech in technicians):
            has_access = True
            keyboard = get_technician_order_keyboard(order_id)
    
    if not has_access:
        bot.edit_message_text(
            f"‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–∫–∞–∑—É #{order_id}.",
            user_id,
            message_id,
            reply_markup=get_back_to_main_menu_keyboard(),
            parse_mode='Markdown'
        )
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    if update_order(order_id, status=status):
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        updated_order = get_order(order_id)
        if updated_order:
            order_obj = Order.from_dict(updated_order)
            
            bot.edit_message_text(
                f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #{order_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "
                f"*{get_status_name(status)}*.\n\n"
                f"{order_obj.format_for_display()}",
                user_id,
                message_id,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
            # –ï—Å–ª–∏ —Ç–µ—Ö–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª –∑–∞–∫–∞–∑, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É
            if status == 'completed' and is_technician(user_id):
                try:
                    dispatcher_id = updated_order['dispatcher_id']
                    if dispatcher_id:
                        bot.send_message(
                            dispatcher_id,
                            f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –∑–∞–≤–µ—Ä—à–µ–Ω —Ç–µ—Ö–Ω–∏–∫–æ–º.\n\n"
                            f"–ö–ª–∏–µ–Ω—Ç: {updated_order['client_name']}\n"
                            f"–¢–µ–ª–µ—Ñ–æ–Ω: {updated_order['client_phone']}\n\n"
                            f"–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π: /order_{order_id}",
                            parse_mode='Markdown'
                        )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É {dispatcher_id}: {e}")
        else:
            bot.edit_message_text(
                f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #{order_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ *{get_status_name(status)}*.",
                user_id,
                message_id,
                reply_markup=get_back_to_main_menu_keyboard(),
                parse_mode='Markdown'
            )
    else:
        bot.edit_message_text(
            f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #{order_id}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            user_id,
            message_id,
            reply_markup=get_back_to_main_menu_keyboard(),
            parse_mode='Markdown'
        )


def handle_assign_technician_callback(user_id, message_id, order_id):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ assign_technician_{order_id}
    """
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
    order = get_order(order_id)
    
    if not order:
        bot.edit_message_text(
            f"‚ö†Ô∏è –ó–∞–∫–∞–∑ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            user_id,
            message_id,
            reply_markup=get_back_to_main_menu_keyboard(),
            parse_mode='Markdown'
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–∫–∞–∑—É (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—ã)
    has_access = False
    
    if is_admin(user_id):
        # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –∑–∞–∫–∞–∑–∞–º
        has_access = True
    elif is_dispatcher(user_id) and order['dispatcher_id'] == user_id:
        # –î–∏—Å–ø–µ—Ç—á–µ—Ä—ã –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∫ —Å–≤–æ–∏–º –∑–∞–∫–∞–∑–∞–º
        has_access = True
    
    if not has_access:
        bot.edit_message_text(
            f"‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏–∫–æ–≤. "
            f"–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞–º.",
            user_id,
            message_id,
            reply_markup=get_back_to_main_menu_keyboard(),
            parse_mode='Markdown'
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫–æ–≤, —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –Ω–∞ –∑–∞–∫–∞–∑
    assigned_technicians = get_order_technicians(order_id)
    assigned_names = []
    
    for tech in assigned_technicians:
        name = tech['first_name']
        if tech['last_name']:
            name += f" {tech['last_name']}"
        assigned_names.append(name)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_text = f"üë®‚Äçüîß *–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–∞ –Ω–∞ –∑–∞–∫–∞–∑ #{order_id}*\n\n"
    
    if assigned_names:
        message_text += "–£–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã:\n" + "\n".join([f"- {name}" for name in assigned_names]) + "\n\n"
    
    message_text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Ö–Ω–∏–∫–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:"
    
    bot.edit_message_text(
        message_text,
        user_id,
        message_id,
        reply_markup=get_technician_list_keyboard(order_id),
        parse_mode='Markdown'
    )


def handle_assign_order_callback(user_id, message_id, order_id, technician_id):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ assign_{order_id}_{technician_id}
    """
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
    order = get_order(order_id)
    
    if not order:
        bot.edit_message_text(
            f"‚ö†Ô∏è –ó–∞–∫–∞–∑ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            user_id,
            message_id,
            reply_markup=get_back_to_main_menu_keyboard(),
            parse_mode='Markdown'
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–∫–∞–∑—É (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—ã)
    has_access = False
    
    if is_admin(user_id):
        # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –∑–∞–∫–∞–∑–∞–º
        has_access = True
    elif is_dispatcher(user_id) and order['dispatcher_id'] == user_id:
        # –î–∏—Å–ø–µ—Ç—á–µ—Ä—ã –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∫ —Å–≤–æ–∏–º –∑–∞–∫–∞–∑–∞–º
        has_access = True
    
    if not has_access:
        bot.edit_message_text(
            f"‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏–∫–æ–≤. "
            f"–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞–º.",
            user_id,
            message_id,
            reply_markup=get_back_to_main_menu_keyboard(),
            parse_mode='Markdown'
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Ö–Ω–∏–∫–µ
    technician = get_user(technician_id)
    
    if not technician:
        bot.edit_message_text(
            f"‚ö†Ô∏è –¢–µ—Ö–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            user_id,
            message_id,
            reply_markup=get_back_to_main_menu_keyboard(),
            parse_mode='Markdown'
        )
        return
    
    # –ù–∞–∑–Ω–∞—á–∞–µ–º —Ç–µ—Ö–Ω–∏–∫–∞ –Ω–∞ –∑–∞–∫–∞–∑
    if assign_order(order_id, technician_id, user_id):
        tech_name = technician['first_name']
        if technician['last_name']:
            tech_name += f" {technician['last_name']}"
        
        bot.edit_message_text(
            f"‚úÖ –¢–µ—Ö–Ω–∏–∫ *{tech_name}* —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –∑–∞–∫–∞–∑ #{order_id}.",
            user_id,
            message_id,
            reply_markup=get_order_management_keyboard(order_id),
            parse_mode='Markdown'
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫—É
        try:
            bot.send_message(
                technician_id,
                f"üìã *–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}*\n\n"
                f"–ö–ª–∏–µ–Ω—Ç: {order['client_name']}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {order['client_phone']}\n"
                f"–ê–¥—Ä–µ—Å: {order['client_address']}\n"
                f"–ü—Ä–æ–±–ª–µ–º–∞: {order['problem_description']}\n\n"
                f"–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π: /order_{order_id}",
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏–∫—É {technician_id}: {e}")
    else:
        bot.edit_message_text(
            f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ç–µ—Ö–Ω–∏–∫–∞ –Ω–∞ –∑–∞–∫–∞–∑ #{order_id}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            user_id,
            message_id,
            reply_markup=get_back_to_main_menu_keyboard(),
            parse_mode='Markdown'
        )


def handle_add_cost_callback(user_id, message_id, order_id):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ add_cost_{order_id}
    """
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
    order = get_order(order_id)
    
    if not order:
        bot.edit_message_text(
            f"‚ö†Ô∏è –ó–∞–∫–∞–∑ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            user_id,
            message_id,
            reply_markup=get_back_to_main_menu_keyboard(),
            parse_mode='Markdown'
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–∫–∞–∑—É
    has_access = False
    
    if is_admin(user_id):
        # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –∑–∞–∫–∞–∑–∞–º
        has_access = True
    elif is_dispatcher(user_id) and order['dispatcher_id'] == user_id:
        # –î–∏—Å–ø–µ—Ç—á–µ—Ä—ã –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∫ —Å–≤–æ–∏–º –∑–∞–∫–∞–∑–∞–º
        has_access = True
    elif is_technician(user_id):
        # –¢–µ—Ö–Ω–∏–∫–∏ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º –∏–º –∑–∞–∫–∞–∑–∞–º
        technicians = get_order_technicians(order_id)
        if any(tech['technician_id'] == user_id for tech in technicians):
            has_access = True
    
    if not has_access:
        bot.edit_message_text(
            f"‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–∫–∞–∑—É #{order_id}.",
            user_id,
            message_id,
            reply_markup=get_back_to_main_menu_keyboard(),
            parse_mode='Markdown'
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    if order['status'] not in ['in_progress', 'completed']:
        bot.edit_message_text(
            f"‚ö†Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ "
            f"–≤ —Å—Ç–∞—Ç—É—Å–µ '–í —Ä–∞–±–æ—Ç–µ' –∏–ª–∏ '–ó–∞–≤–µ—Ä—à–µ–Ω'.",
            user_id,
            message_id,
            reply_markup=get_back_to_main_menu_keyboard(),
            parse_mode='Markdown'
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    current_cost = order['service_cost'] if order['service_cost'] else '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'
    
    bot.edit_message_text(
        f"üí∞ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}*\n\n"
        f"–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {current_cost}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 1500):",
        user_id,
        message_id,
        parse_mode='Markdown'
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    set_user_state(user_id, "waiting_for_cost", order_id)


def handle_add_description_callback(user_id, message_id, order_id):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ add_description_{order_id}
    """
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
    order = get_order(order_id)
    
    if not order:
        bot.edit_message_text(
            f"‚ö†Ô∏è –ó–∞–∫–∞–∑ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            user_id,
            message_id,
            reply_markup=get_back_to_main_menu_keyboard(),
            parse_mode='Markdown'
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–∫–∞–∑—É
    has_access = False
    
    if is_admin(user_id):
        # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –∑–∞–∫–∞–∑–∞–º
        has_access = True
    elif is_dispatcher(user_id) and order['dispatcher_id'] == user_id:
        # –î–∏—Å–ø–µ—Ç—á–µ—Ä—ã –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∫ —Å–≤–æ–∏–º –∑–∞–∫–∞–∑–∞–º
        has_access = True
    elif is_technician(user_id):
        # –¢–µ—Ö–Ω–∏–∫–∏ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º –∏–º –∑–∞–∫–∞–∑–∞–º
        technicians = get_order_technicians(order_id)
        if any(tech['technician_id'] == user_id for tech in technicians):
            has_access = True
    
    if not has_access:
        bot.edit_message_text(
            f"‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–∫–∞–∑—É #{order_id}.",
            user_id,
            message_id,
            reply_markup=get_back_to_main_menu_keyboard(),
            parse_mode='Markdown'
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    if order['status'] not in ['in_progress', 'completed']:
        bot.edit_message_text(
            f"‚ö†Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ä–∞–±–æ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ "
            f"–≤ —Å—Ç–∞—Ç—É—Å–µ '–í —Ä–∞–±–æ—Ç–µ' –∏–ª–∏ '–ó–∞–≤–µ—Ä—à–µ–Ω'.",
            user_id,
            message_id,
            reply_markup=get_back_to_main_menu_keyboard(),
            parse_mode='Markdown'
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è —Ä–∞–±–æ—Ç
    current_description = order['service_description'] if order['service_description'] else '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'
    
    bot.edit_message_text(
        f"üìù *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ä–∞–±–æ—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}*\n\n"
        f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {current_description}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç:",
        user_id,
        message_id,
        parse_mode='Markdown'
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    set_user_state(user_id, "waiting_for_description", order_id)


@bot.message_handler(func=lambda message: True)
def handle_message(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    user_id = message.from_user.id
    text = message.text
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    state = get_user_state(user_id)
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    user = get_user(user_id)
    if not user:
        first_name = message.from_user.first_name
        last_name = message.from_user.last_name
        username = message.from_user.username
        save_user(user_id, first_name, last_name, username)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∞–∫–∫–∞—É–Ω—Ç –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        bot.send_message(
            user_id,
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Å–µ—Ä–≤–∏—Å–∞ —Ä–µ–º–æ–Ω—Ç–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤!\n\n"
            "–í–∞—à–∞ —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. "
            "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –≤–∞—à–∞ —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.",
            parse_mode='Markdown'
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        admins = [u for u in get_all_users() if u['role'] == 'admin']
        for admin in admins:
            try:
                bot.send_message(
                    admin['user_id'],
                    f"üë§ *–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø*\n\n"
                    f"–ò–º—è: {first_name} {last_name or ''}\n"
                    f"Username: @{username or '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
                    f"ID: `{user_id}`\n\n"
                    f"–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /manage_users",
                    parse_mode='Markdown'
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin['user_id']}: {e}")
        
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–∫—Ä–æ–º–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–≤–æ–¥–∞ ID –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–∏)
    if not state or not state.startswith("waiting_for_") or state == "waiting_for_phone":
        if not is_user_approved(user_id):
            bot.send_message(
                user_id,
                "‚ö†Ô∏è –í–∞—à–∞ —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                parse_mode='Markdown'
            )
            return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if state == "waiting_for_phone":
        handle_phone_input(user_id, text)
    elif state == "waiting_for_name":
        handle_name_input(user_id, text)
    elif state == "waiting_for_address":
        handle_address_input(user_id, text)
    elif state == "waiting_for_problem":
        handle_problem_input(user_id, text)
    elif state == "waiting_for_admin_id":
        handle_user_id_input(user_id, text, "admin")
    elif state == "waiting_for_dispatcher_id":
        handle_user_id_input(user_id, text, "dispatcher")
    elif state == "waiting_for_technician_id":
        handle_user_id_input(user_id, text, "technician")
    elif state == "waiting_for_cost":
        handle_cost_input(user_id, text)
    elif state == "waiting_for_description":
        handle_description_input(user_id, text)
    else:
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.send_message(
            user_id,
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Å–µ—Ä–≤–∏—Å–∞ —Ä–µ–º–æ–Ω—Ç–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:",
            reply_markup=get_main_menu_keyboard(user_id),
            parse_mode='Markdown'
        )


def handle_phone_input(user_id, text):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if not validate_phone(text):
        bot.send_message(
            user_id,
            "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ "
            "+7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX.",
            parse_mode='Markdown'
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    set_user_state(user_id, "waiting_for_name")
    
    # –í—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ user_data
    user_id_str = str(user_id)
    if not hasattr(bot, 'user_data'):
        bot.user_data = {}
    if user_id_str not in bot.user_data:
        bot.user_data[user_id_str] = {}
    
    bot.user_data[user_id_str]['phone'] = text
    
    bot.send_message(
        user_id,
        "üìù –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:",
        parse_mode='Markdown'
    )


def handle_name_input(user_id, text):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞
    """
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    set_user_state(user_id, "waiting_for_address")
    
    # –í—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    user_id_str = str(user_id)
    if not hasattr(bot, 'user_data'):
        bot.user_data = {}
    if user_id_str not in bot.user_data:
        bot.user_data[user_id_str] = {}
    
    bot.user_data[user_id_str]['name'] = text
    
    bot.send_message(
        user_id,
        "üìù –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞:",
        parse_mode='Markdown'
    )


def handle_address_input(user_id, text):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞
    """
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    set_user_state(user_id, "waiting_for_problem")
    
    # –í—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    user_id_str = str(user_id)
    if not hasattr(bot, 'user_data'):
        bot.user_data = {}
    if user_id_str not in bot.user_data:
        bot.user_data[user_id_str] = {}
    
    bot.user_data[user_id_str]['address'] = text
    
    bot.send_message(
        user_id,
        "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:",
        parse_mode='Markdown'
    )


def handle_problem_input(user_id, text):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã
    """
    user_id_str = str(user_id)
    if not hasattr(bot, 'user_data'):
        bot.user_data = {}
    if user_id_str not in bot.user_data:
        bot.user_data[user_id_str] = {}
        bot.send_message(
            user_id,
            "‚ö†Ô∏è –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=get_main_menu_keyboard(user_id),
            parse_mode='Markdown'
        )
        clear_user_state(user_id)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    phone = bot.user_data[user_id_str].get('phone')
    name = bot.user_data[user_id_str].get('name')
    address = bot.user_data[user_id_str].get('address')
    problem = text
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    bot.user_data[user_id_str] = {}
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    order_id = save_order(user_id, phone, name, address, problem)
    
    if order_id:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –∑–∞–∫–∞–∑–µ
        order = get_order(order_id)
        if order:
            order_obj = Order.from_dict(order)
            
            bot.send_message(
                user_id,
                f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
                f"{order_obj.format_for_display()}",
                reply_markup=get_order_management_keyboard(order_id),
                parse_mode='Markdown'
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            send_order_notification_to_admins(bot, order_id)
        else:
            bot.send_message(
                user_id,
                f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!",
                reply_markup=get_main_menu_keyboard(user_id),
                parse_mode='Markdown'
            )
    else:
        bot.send_message(
            user_id,
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_keyboard(user_id),
            parse_mode='Markdown'
        )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    clear_user_state(user_id)


def handle_user_id_input(user_id, text, role):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–∏
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —á–∏—Å–ª–æ–º
        target_user_id = int(text.strip())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        target_user = get_user(target_user_id)
        
        if not target_user:
            bot.send_message(
                user_id,
                f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω. "
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=get_back_to_main_menu_keyboard(),
                parse_mode='Markdown'
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –µ–≥–æ
        if update_user_role(target_user_id, role) and approve_user(target_user_id):
            name = target_user['first_name']
            if target_user['last_name']:
                name += f" {target_user['last_name']}"
            
            role_name = get_role_name(role)
            
            bot.send_message(
                user_id,
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å *{name}* —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ {role_name}.",
                reply_markup=get_user_management_keyboard(),
                parse_mode='Markdown'
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Ä–æ–ª–∏
            try:
                bot.send_message(
                    target_user_id,
                    f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–∏–ª –≤–∞—Å –≤ —Å–∏—Å—Ç–µ–º—É –∫–∞–∫: {role_name}.\n\n"
                    f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.",
                    reply_markup=get_main_menu_keyboard(target_user_id),
                    parse_mode='Markdown'
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")
        else:
            bot.send_message(
                user_id,
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_user_management_keyboard(),
                parse_mode='Markdown'
            )
    except ValueError:
        bot.send_message(
            user_id,
            "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.",
            reply_markup=get_back_to_main_menu_keyboard(),
            parse_mode='Markdown'
        )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    clear_user_state(user_id)


def handle_cost_input(user_id, text):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É—Å–ª—É–≥
    """
    # –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞
    order_id = get_current_order_id(user_id)
    
    if not order_id:
        bot.send_message(
            user_id,
            "‚ö†Ô∏è –û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=get_main_menu_keyboard(user_id),
            parse_mode='Markdown'
        )
        clear_user_state(user_id)
        return
    
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —á–∏—Å–ª–æ
        cost = float(text.strip().replace(',', '.'))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞
        if update_order(order_id, service_cost=cost):
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
            order = get_order(order_id)
            if order:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–∫–∞–∑–∞—Ç—å
                if is_admin(user_id) or (is_dispatcher(user_id) and order['dispatcher_id'] == user_id):
                    keyboard = get_order_management_keyboard(order_id)
                else:
                    keyboard = get_technician_order_keyboard(order_id)
                
                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∑–∞–∫–∞–∑–∞
                order_obj = Order.from_dict(order)
                
                bot.send_message(
                    user_id,
                    f"‚úÖ –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ #{order_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
                    f"{order_obj.format_for_display()}",
                    reply_markup=keyboard,
                    parse_mode='Markdown'
                )
                
                # –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ–ª–∞–µ—Ç —Ç–µ—Ö–Ω–∏–∫, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É
                if is_technician(user_id) and order['dispatcher_id']:
                    try:
                        bot.send_message(
                            order['dispatcher_id'],
                            f"üí∞ –¢–µ—Ö–Ω–∏–∫ –¥–æ–±–∞–≤–∏–ª —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫ –∑–∞–∫–∞–∑—É #{order_id}:\n\n"
                            f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {cost} —Ä—É–±.\n"
                            f"–ö–ª–∏–µ–Ω—Ç: {order['client_name']}\n"
                            f"–¢–µ–ª–µ—Ñ–æ–Ω: {order['client_phone']}\n\n"
                            f"–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π: /order_{order_id}",
                            parse_mode='Markdown'
                        )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É {order['dispatcher_id']}: {e}")
            else:
                bot.send_message(
                    user_id,
                    f"‚úÖ –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ #{order_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!",
                    reply_markup=get_main_menu_keyboard(user_id),
                    parse_mode='Markdown'
                )
        else:
            bot.send_message(
                user_id,
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_menu_keyboard(user_id),
                parse_mode='Markdown'
            )
    except ValueError:
        bot.send_message(
            user_id,
            "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1500).",
            parse_mode='Markdown'
        )
        return
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    clear_user_state(user_id)


def handle_description_input(user_id, text):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç
    """
    # –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞
    order_id = get_current_order_id(user_id)
    
    if not order_id:
        bot.send_message(
            user_id,
            "‚ö†Ô∏è –û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=get_main_menu_keyboard(user_id),
            parse_mode='Markdown'
        )
        clear_user_state(user_id)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç
    if update_order(order_id, service_description=text):
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        order = get_order(order_id)
        if order:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–∫–∞–∑–∞—Ç—å
            if is_admin(user_id) or (is_dispatcher(user_id) and order['dispatcher_id'] == user_id):
                keyboard = get_order_management_keyboard(order_id)
            else:
                keyboard = get_technician_order_keyboard(order_id)
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∑–∞–∫–∞–∑–∞
            order_obj = Order.from_dict(order)
            
            bot.send_message(
                user_id,
                f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n"
                f"{order_obj.format_for_display()}",
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
            # –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ–ª–∞–µ—Ç —Ç–µ—Ö–Ω–∏–∫, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É
            if is_technician(user_id) and order['dispatcher_id']:
                try:
                    description_short = text if len(text) <= 100 else text[:97] + "..."
                    
                    bot.send_message(
                        order['dispatcher_id'],
                        f"üìù –¢–µ—Ö–Ω–∏–∫ –¥–æ–±–∞–≤–∏–ª –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç –∫ –∑–∞–∫–∞–∑—É #{order_id}:\n\n"
                        f"–û–ø–∏—Å–∞–Ω–∏–µ: {description_short}\n"
                        f"–ö–ª–∏–µ–Ω—Ç: {order['client_name']}\n"
                        f"–¢–µ–ª–µ—Ñ–æ–Ω: {order['client_phone']}\n\n"
                        f"–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π: /order_{order_id}",
                        parse_mode='Markdown'
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É {order['dispatcher_id']}: {e}")
        else:
            bot.send_message(
                user_id,
                f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
                reply_markup=get_main_menu_keyboard(user_id),
                parse_mode='Markdown'
            )
    else:
        bot.send_message(
            user_id,
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è —Ä–∞–±–æ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_keyboard(user_id),
            parse_mode='Markdown'
        )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    clear_user_state(user_id)